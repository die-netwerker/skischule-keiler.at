const p=`{% block sw_settings %} <sw-page class="sw-settings-index" :show-smart-bar="false" > {% block sw_settings_content %} <template #content> <sw-card-view class="sw-settings-index__card-view"> {% block sw_settings_content_card_view %} <mt-card hero class="sw-settings__card--hero" position-identifier="sw-settings-index" > {% block sw_settings_content_card_view_header %} <h1 class="sw-settings__content-header"> {{ $tc('sw-settings.index.title') }} </h1> {% endblock %} {# @deprecated tag:v6.8.0 - will be removed without replacement #} <mt-banner v-if="!feature.isActive('v6.8.0.0') && !hideSettingRenameBanner" class="sw-settings__content-rename-banner" variant="info" closable @close="onCloseSettingRenameBanner" > <p v-html="$t('sw-settings.index.textSettingRenameBanner')"> </p> </mt-banner> {% block sw_settings_content_card_content_grid %} <div class="sw-settings__content-grid" position-identifier="sw-settings-index-content" > <div v-for="(settingsItems, settingsGroup) in settingsGroups" :id="\`sw-settings__content-group-\${settingsGroup}\`" :key="settingsGroup" class="sw-settings__content-group" > <h2>{{ getGroupLabel(settingsGroup) }}</h2> <sw-settings-item v-for="settingsItem in settingsItems" :id="settingsItem.id" :key="settingsItem.name" :label="getLabel(settingsItem)" :to="getRouteConfig(settingsItem)" > <template #icon> <component :is="settingsItem.iconComponent" v-if="settingsItem.iconComponent" /> <mt-icon v-else :name="settingsItem.icon" size="16px" /> </template> </sw-settings-item> </div> </div> {% endblock %} </mt-card> {% endblock %} </sw-card-view> </template> {% endblock %} </sw-page> {% endblock %}`,{hasOwnProperty:s}=Shopware.Utils.object,d={template:p,inject:["acl","feature","userConfigService"],data(){return{hideSettingRenameBanner:!0}},created(){Shopware.Feature.isActive("v6.8.0.0")||this.getUserConfig()},metaInfo(){return{title:this.$createTitle()}},computed:{settingsGroups(){return Object.entries(Shopware.Store.get("settingsItems").settingsGroups).reduce((t,[l,c])=>{const r=c.filter(n=>n.privilege?this.acl.can(n.privilege):!0).sort((n,i)=>{var a,o;const g=typeof n.label=="string"?n.label:(a=n.label)==null?void 0:a.label,u=typeof i.label=="string"?i.label:(o=i.label)==null?void 0:o.label;return this.$tc(g).localeCompare(this.$tc(u))});return r.length>0&&(t[l]=r),t},{})}},methods:{async getUserConfig(){var t;const e=await this.userConfigService.search(["settings.hideRenameBanner"]);this.hideSettingRenameBanner=!!((t=e.data["settings.hideRenameBanner"])!=null&&t.value)},async onCloseSettingRenameBanner(){this.hideSettingRenameBanner=!0,await this.userConfigService.upsert({"settings.hideRenameBanner":{value:!0}})},hasPluginConfig(){return s(this.settingsGroups,"plugins")&&this.settingsGroups.plugins.length>0},getRouteConfig(e){return s(e,"to")?typeof e.to=="string"?{name:e.to}:typeof e.to=="object"?e.to:{}:{}},getLabel(e){return s(e,"label")?typeof e.label=="string"?this.$tc(e.label):typeof e.label!="object"||!s(e.label,"translated")||!s(e.label,"label")||typeof e.label.label!="string"?"":e.label.translated?e.label.label:this.$tc(e.label.label):""},getGroupLabel(e){const t=e.charAt(0).toUpperCase()+e.slice(1);return this.$tc(`sw-settings.index.tab${t}`)}}};export{d as default};
