const a=`<sw-page class="sw-settings-measurement"> <template #smart-bar-header> <h2> {{ $t('sw-settings.index.title') }} <mt-icon name="regular-chevron-right-xs" size="12px" /> {{ $t('sw-settings-measurement.general.textHeadline') }} </h2> </template> <template #language-switch> <sw-language-switch @on-change="onChangeLanguage" /> </template> <template #smart-bar-actions> <mt-button v-tooltip.bottom="{ message: $t('sw-privileges.tooltip.warning'), disabled: acl.can('measurement.creator'), showOnDisabledElements: true }" class="sw-settings-measurement__save-action" variant="primary" size="default" :is-loading="isLoading" :disabled="!acl.can('measurement.creator')" @click="onSave" > {{ $t('global.default.save') }} </mt-button> </template> <template #content> <sw-card-view> <sw-settings-measurement-default-units :measurement-systems="measurementSystems" :measurement-system="measurementSystem" :measurement-units="measurementUnits" @measurement-system-change="onChangeMeasurementSystem" /> </sw-card-view> </template> </sw-page>`,{Mixin:r}=Shopware,{Criteria:m}=Shopware.Data,{ShopwareError:u}=Shopware.Classes,o={template:a,inject:["repositoryFactory","systemConfigApiService","acl"],mixins:[r.getByName("notification")],metaInfo(){return{title:this.$createTitle()}},data(){return{measurementUnits:{system:null,length:null,weight:null},defaultDisplayUnits:[],measurementSystems:[],measurementSystem:null,isLoading:!1}},computed:{measurementSystemRepository(){return this.repositoryFactory.create("measurement_system")},measurementSystemCriteria(){const e=new m(1,null);return e.addAssociation("units"),e},defaultLengthUnit(){var i;const e=((i=this.measurementSystem)==null?void 0:i.units)||[],n=this.defaultDisplayUnits.find(s=>s.type==="length"),t=e.find(s=>s.type==="length"&&s.default);return e.find(s=>s.shortName===n.shortName)||t},defaultWeightUnit(){var i;const e=((i=this.measurementSystem)==null?void 0:i.units)||[],n=this.defaultDisplayUnits.find(s=>s.type==="weight"),t=e.find(s=>s.type==="weight"&&s.default);return e.find(s=>s.shortName===n.shortName)||t},requiredFields(){const e=n=>Array.isArray(n)&&n.length===0;return{system:e(this.measurementUnits.system)||!this.measurementUnits.system,length:e(this.measurementUnits.length)||!this.measurementUnits.length,weight:e(this.measurementUnits.weight)||!this.measurementUnits.weight}}},created(){this.createdComponent()},methods:{async createdComponent(){var n;const e=await this.getMeasurementUnits();this.measurementUnits={system:e["core.measurementUnits.system"],length:e["core.measurementUnits.length"],weight:e["core.measurementUnits.weight"]},this.measurementSystems=await this.getDefaultMeasurementSystems(),this.measurementSystem=this.measurementSystems.find(t=>t.technicalName===this.measurementUnits.system),this.defaultDisplayUnits=(((n=this.measurementSystem)==null?void 0:n.units)||[]).filter(t=>[this.measurementUnits.length,this.measurementUnits.weight].includes(t.shortName))},getMeasurementUnits(){return this.systemConfigApiService.getValues("core.measurementUnits")},getDefaultMeasurementSystems(){return this.measurementSystemRepository.search(this.measurementSystemCriteria)},async onSave(){var n;this.isLoading=!0;const e=Object.keys(this.requiredFields).filter(t=>this.requiredFields[t]);try{if(e.length>0){e.forEach(t=>{const i=`measurement_system.${this.measurementSystem.id}.${t}`,s=new u({code:"c1051bb4-d103-4f74-8988-acbcafc7fdc3",detail:"This field must not be empty.",selfLink:i});Shopware.Store.get("error").addApiError({expression:i,error:s})}),this.isLoading=!1;return}await this.systemConfigApiService.saveValues({"core.measurementUnits.system":this.measurementUnits.system,"core.measurementUnits.length":this.measurementUnits.length,"core.measurementUnits.weight":this.measurementUnits.weight}),this.createNotificationSuccess({title:this.$t("global.default.success"),message:this.$t("sw-settings-measurement.notification.saveMeasurementSuccess")}),Shopware.Store.get("error").resetApiErrors()}catch(t){this.createNotificationError({title:this.$t("global.default.error"),message:t.message||this.$t("sw-settings-measurement.notification.saveMeasurementError")})}finally{this.defaultDisplayUnits=(((n=this.measurementSystem)==null?void 0:n.units)||[]).filter(t=>[this.measurementUnits.length,this.measurementUnits.weight].includes(t.shortName)),this.isLoading=!1}},onChangeLanguage(e){Shopware.Store.get("context").setApiLanguageId(e),this.createdComponent()},async onChangeMeasurementSystem(e){Array.isArray(e)&&e.length===0||!e||(Shopware.Store.get("error").resetApiErrors(),this.measurementSystem=this.measurementSystems.find(n=>n.technicalName===e),this.measurementUnits={system:e,length:this.defaultLengthUnit.shortName,weight:this.defaultWeightUnit.shortName})}}};export{o as default};
