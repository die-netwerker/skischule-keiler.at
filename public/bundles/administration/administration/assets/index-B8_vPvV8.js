const e=`{% block sw_shopware_updates_plugins %} <mt-card position-identifier="sw-shopware-updates-plugins" :title="$t('sw-settings-shopware-updates.cards.extensions')" :is-loading="isLoading" > <template #grid> <sw-data-grid :show-selection="false" :data-source="plugins" :columns="columns" > {% block sw_shopware_updates_plugins_column_icon %} <template #column-icon="{ item, isInlineEdit }" > <sw-color-badge v-if="item.statusVariant" :variant="item.statusVariant" :rounded="true" /> <sw-color-badge v-else :color="item.statusColor" :rounded="true" />&nbsp; <template v-if="item.statusMessage === 'notCompatible'"> {{ item.statusMessage }} {{ $t('sw-settings-shopware-updates.plugins.pluginWillBeDeactivatedHint') }} </template> <template v-else-if="item.statusMessage"> {{ item.statusMessage }} </template> <template v-else> {{ $t('sw-settings-shopware-updates.plugins.pluginNotInStore') }} </template> </template> {% endblock %} {% block sw_shopware_updates_plugins_column_action %} <template #actions="{item}"> <sw-context-menu-item @click="openMyExtensions()"> {{ $t('sw-settings-shopware-updates.plugins.actions.openMyExtensions') }} </sw-context-menu-item> </template> {% endblock %} </sw-data-grid> </template> </mt-card> {% endblock %}`,t=Shopware.Component.wrapComponentConfig({template:e,inject:["feature"],props:{isLoading:{type:Boolean},plugins:{type:Array,default:()=>[]}},computed:{columns(){return[{property:"name",label:this.$tc("sw-settings-shopware-updates.plugins.columns.name"),rawData:!0},{property:"icon",label:this.$tc("sw-settings-shopware-updates.plugins.columns.available"),rawData:!0}]}},methods:{openMyExtensions(){this.$router.push({name:"sw.extension.my-extensions.listing.app"})}}});export{t as default};
