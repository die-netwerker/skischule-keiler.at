const o=`{% block sw_sorting_select %} <div class="sw-cms-list__actions-sorting"> <mt-select name="sortType" :label="$tc('sw-cms.sorting.labelSort')" :model-value="sortingConditionConcatenation" :options="sortingConditionOptions" @update:model-value="onSortingChanged" /> </div> {% endblock %}`,n={template:o,emits:["sorting-changed"],props:{sortBy:{type:String,default:"createdAt",required:!1},sortDirection:{type:String,default:"DESC",required:!1},additionalSortOptions:{type:Array,default:()=>[],required:!1}},computed:{sortOptions(){return[{value:"name:ASC",name:this.$tc("sw-cms.sorting.labelSortByNameAsc")},{value:"name:DESC",name:this.$tc("sw-cms.sorting.labelSortByNameDesc")},{value:"createdAt:DESC",name:this.$tc("sw-cms.sorting.labelSortByCreatedDsc")},{value:"createdAt:ASC",name:this.$tc("sw-cms.sorting.labelSortByCreatedAsc")},{value:"updatedAt:DESC",name:this.$tc("sw-cms.sorting.labelSortByUpdatedDsc")},{value:"updatedAt:ASC",name:this.$tc("sw-cms.sorting.labelSortByUpdatedAsc")},...this.additionalSortOptions]},sortingConditionConcatenation(){return`${this.sortBy}:${this.sortDirection}`},sortingConditionOptions(){return this.sortOptions.map(t=>({id:t.value,value:t.value,label:t.name}))}},methods:{onSortingChanged(t){const[e,s]=t.split(":");this.$emit("sorting-changed",{sortBy:e,sortDirection:s})}}};export{n as default};
