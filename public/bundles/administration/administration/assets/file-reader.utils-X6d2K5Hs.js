function i(n,e,r){n.onerror=()=>{n.abort(),r(new DOMException("Problem parsing file."))},n.onload=()=>{e(n.result)}}function a(n){const e=n.split(".");return e.length===1?{extension:"",fileName:n}:e.length===2&&!e[0]?{extension:"",fileName:n}:{extension:e.pop(),fileName:e.join(".")}}function s(n){const e=new FileReader;return new Promise((r,t)=>{i(e,r,t),e.readAsArrayBuffer(n)})}function f(n){const e=new FileReader;return new Promise((r,t)=>{i(e,r,t),e.readAsDataURL(n)})}function l(n){const e=new FileReader;return new Promise((r,t)=>{i(e,r,t),e.readAsText(n)})}function u(n){return a(n.name)}function d(n){let e=n.href.split("/").pop();if(!e)throw new Error("Invalid URL");const r=e.indexOf("?");return r>0&&(e=e.substring(0,r)),e=decodeURI(e),a(e)}function c(n){var o;const e=(o=n.headers)==null?void 0:o["content-disposition"];if(!e)return null;const r=e.match(/filename\*=UTF-8''([^;]+)/);if(r)return r[1];const t=e.match(/filename="?([^"]+)"?/);return t?t[1]:null}const m={readFileAsArrayBuffer:s,readFileAsDataURL:f,readFileAsText:l,getNameAndExtensionFromFile:u,getNameAndExtensionFromUrl:d,getFilenameFromResponse:c};export{m as f};
