const i=`{% block sw_inactivity_login %} <div class="sw-inactivity-login"> <sw-modal v-if="lastKnownUser" class="sw-inactivity-login__modal" :title="$tc('sw-inactivity-login.modal.title')" :closable="false" > <mt-password-field v-model="password" v-autofocus :label="$tc('sw-login.index.labelPassword')" :disabled="isLoading" :error="passwordError" @keydown.enter="loginUserWithPassword" /> <mt-checkbox v-model:checked="rememberMe" :label="$tc('sw-login.index.labelKeepLoggedIn')" /> <template #modal-footer> <a role="link" tabindex="0" @click="onBackToLogin" @keydown.enter="onBackToLogin" > {{ $tc('sw-inactivity-login.modal.actions.backToLogin') }} </a> <mt-button variant="primary" :is-loading="isLoading" @click="loginUserWithPassword" > {{ $tc('sw-login.index.buttonLogin') }} </mt-button> </template> </sw-modal> </div> {% endblock %}`,{Component:o}=Shopware,n=o.wrapComponentConfig({template:i,inject:["loginService","feature"],props:{hash:{type:String,required:!0}},data(){return{isLoading:!1,lastKnownUser:"",password:"",passwordError:null,sessionChannel:null,rememberMe:!1}},computed:{title(){const e=this.$tc("sw-inactivity-login.general.mainMenuItemIndex"),s=this.$tc("global.sw-admin-menu.textShopwareAdmin");return`${e} | ${s}`}},metaInfo(){return{title:this.title}},created(){window.processingInactivityLogout=!1;const e=sessionStorage.getItem("lastKnownUser");if(!e){this.$router.push({name:"sw.login.index"});return}this.sessionChannel=new BroadcastChannel("session_channel"),this.sessionChannel.postMessage({inactive:!0}),this.sessionChannel.onmessage=s=>{const t=s.data;!t||!Shopware.Utils.object.hasOwnProperty(t,"inactive")||t.inactive||this.forwardLogin()},this.lastKnownUser=e},mounted(){const e=sessionStorage.getItem(`inactivityBackground_${this.hash}`);e&&(document.querySelector(".sw-inactivity-login").style.backgroundImage=`url('${e}')`)},beforeUnmount(){var e;(e=this.sessionChannel)==null||e.close(),sessionStorage.removeItem(`inactivityBackground_${this.hash}`)},methods:{loginUserWithPassword(){return this.isLoading=!0,this.loginService.setRememberMe(this.rememberMe),this.loginService.loginByUsername(this.lastKnownUser,this.password).then(()=>{this.handleLoginSuccess(),this.isLoading=!1}).catch(()=>{this.password="",this.passwordError={detail:this.$tc("sw-inactivity-login.modal.errors.password")},this.isLoading=!1})},handleLoginSuccess(){var e;this.forwardLogin(),(e=this.sessionChannel)==null||e.postMessage({inactive:!1})},forwardLogin(){this.password="",sessionStorage.removeItem("lastKnownUser");const e=JSON.parse(sessionStorage.getItem(`sw-admin-previous-route_${this.hash}`)||"{}");sessionStorage.removeItem(`sw-admin-previous-route_${this.hash}`),e!=null&&e.fullPath?this.$router.push(e.fullPath):this.$router.push({name:"core"}),window.location.reload()},onBackToLogin(){this.isLoading=!0,this.lastKnownUser="",this.password="",this.$router.push({name:"sw.login.index"})}}});export{n as default};
