const m=`{% block sw_app_actions %} <div class="sw-app-actions" :class="{'sw-app-actions__empty': !areActionsAvailable}" > <template v-if="areActionsAvailable"> <sw-context-button class="sw-app-actions__action-button"> <template #button> <mt-button variant="secondary"> <mt-icon name="solid-ellipsis-h-s" size="16" /> </mt-button> </template> <sw-app-action-button v-for="action in actions" :key="action.id" :action="action" @run-app-action="runAction" /> </sw-context-button> {% block sw_app_action_modal %} <sw-modal v-if="isOpenModal" class="sw-modal-app-action-button" :class="{ 'is-expanded' : isExpanded}" :variant="size" @modal-close="onCloseModal" > {% block sw_app_action_modal_header %} <template #modal-header> {% block sw_app_action_modal_slot_header %} {% block sw_app_action_modal_close %} <div id="modal-app-action-button" class="sw-modal__title" > <img v-if="action.icon" class="sw-app-action-button__icon" :src="\`data:image/png;base64, \${action.icon}\`" alt="" > <span>{{ action.app }}</span> </div> {% endblock %} {% block sw_app_action_modal_close_button %} <button class="sw-modal__close" :title="$tc('global.sw-modal.labelClose')" :aria-label="$tc('global.sw-modal.labelClose')" @click.prevent="onCloseModal" > {% block sw_app_action_modal_close_icon %} <mt-icon name="regular-times-s" size="16px" /> {% endblock %} </button> {% endblock %} {% endblock %} </template> {% endblock %} {% block sw_app_action_modal_iframe %} <iframe id="app-action-button-iframe" ref="innerFrame" class="sw-app-action-button-iframe" referrerpolicy="origin-when-cross-origin" :src="iframeUrl" ></iframe> {% endblock %} </sw-modal> {% endblock %} {% block sw_app_action_modal_confirm %} <sw-modal v-if="isOpenConfirmModal" class="sw-app-action-button-modal-confirm" :title="$tc('sw-app.component.sw-app-actions.closeWindow')" variant="small" @modal-close="onCloseModalConfirm" > <p>{{ $tc('sw-app.component.sw-app-actions.iframeModalConfirmMessage', { title: action.app }, 0) }}</p> <p>{{ $tc('sw-app.component.sw-app-actions.iframeModalConfirmMessageDescription') }}</p> {% block sw_app_action_modal_confirm_footer %} <template #modal-footer> {% block sw_app_action_modal_confirm_checkbox %} <mt-checkbox :checked="!isShowModalConfirm" :label="$tc('sw-app.component.sw-app-actions.dontAskMeAgain')" @update:checked="onChangeCheckboxShow()" /> {% endblock %} {% block sw_app_action_modal_confirm_footer_buttons %} <div class="footer-buttons"> {% block sw_app_action_modal_confirm_footer_cancel %} <mt-button size="small" variant="secondary" @click="onCloseModalConfirm" > {{ $tc('global.default.cancel') }} </mt-button> {% endblock %} {% block sw_app_action_modal_confirm_footer_continue %} <mt-button variant="primary" size="small" @click="onConfirmClose" > {{ $tc('global.default.close') }} </mt-button> {% endblock %} </div> {% endblock %} </template> {% endblock %} </sw-modal> {% endblock %} </template> </div> {% endblock %}`,{Mixin:f}=Shopware,{Criteria:r}=Shopware.Data,{hasOwnProperty:u}=Shopware.Utils.object,n=Object.freeze({ACTION_SHOW_NOTIFICATION:"notification",ACTION_RELOAD_DATA:"reload",ACTION_OPEN_NEW_TAB:"openNewTab",ACTION_OPEN_MODAL:"openModal"}),l={small:"small",medium:"default",large:"large",fullscreen:"full"},c="app.action_button.iframe",h={template:m,extensionApiDevtoolInformation:{property:"ui.actionButton",entity:t=>`${t.entity}`,view:t=>`${t.view}`},inject:["feature","appActionButtonService","repositoryFactory","extensionSdkService"],mixins:[f.getByName("notification")],data(){return{actions:[],matchedRoutes:[],isOpenModal:!1,isOpenConfirmModal:!1,title:"",action:null,size:"default",isExpanded:!1,iframeUrl:"",isShowModalConfirm:!0,iframeUserConfig:null}},computed:{entity(){var t,o,e;return(e=(o=(t=this.$route)==null?void 0:t.meta)==null?void 0:o.$module)==null?void 0:e.entity},view(){var o,e;const t=this.matchedRoutes.filter(i=>{var a,s;return!!((s=(a=i==null?void 0:i.meta)==null?void 0:a.appSystem)!=null&&s.view)}).pop();return(e=(o=t==null?void 0:t.meta)==null?void 0:o.appSystem)==null?void 0:e.view},areActionsAvailable(){return!!this.actions&&this.actions.length>0&&this.params.length>0},params(){return Shopware.Store.get("shopwareApps").selectedIds},userConfigRepository(){return this.repositoryFactory.create("user_config")},currentUser(){return Shopware.Store.get("session").currentUser},userConfigCriteria(){var o;const t=new r(1,25);return t.addFilter(r.equals("key",c)),t.addFilter(r.equals("userId",(o=this.currentUser)==null?void 0:o.id)),t},extensionSdkButtons(){return Shopware.Store.get("actionButtons").buttons.filter(t=>t.entity===this.entity&&t.view===this.view)}},watch:{$route:{immediate:!0,handler(){this.matchedRoutes=this.$router.currentRoute.value.matched,this.loadActions()}},extensionSdkButtons(){this.loadActions()}},methods:{async runAction(t){const o={ids:this.params};if(u(t,"callback")&&typeof t.callback=="function"){t.callback(t.entity,o.ids);return}const{data:e}=await this.appActionButtonService.runAction(t.id,o),{actionType:i,redirectUrl:a,status:s,message:p}=e;switch(this.action=this.actions.find(d=>d.id===t.id),i){case n.ACTION_OPEN_NEW_TAB:window.open(a,"_blank");break;case n.ACTION_SHOW_NOTIFICATION:this.createNotification({variant:s,message:p});break;case n.ACTION_RELOAD_DATA:window.location.reload();break;case n.ACTION_OPEN_MODAL:await this.getUserConfig(),this.size=l[e.size]||"default",this.iframeUrl=e.iframeUrl,this.isExpanded=e.expand===!0,this.isOpenModal=!0;break}},async loadActions(){try{this.actions=await this.appActionButtonService.getActionButtonsPerView(this.entity,this.view),this.actions.push(...this.extensionSdkButtons)}catch(t){if(this.actions=[],t.name&&t.name==="InvalidActionButtonParameterError")return;this.createNotificationError({message:this.$tc("sw-app.component.sw-app-actions.messageErrorFetchButtons")})}},onCloseModal(){this.size===l.small&&!this.isExpanded?this.isOpenModal=!1:this.onOpenModalConfirm()},onOpenModalConfirm(){if(this.iframeUserConfig.value.isShowModalConfirm){this.isOpenConfirmModal=!0;return}this.isOpenModal=!1},onCloseModalConfirm(){this.isOpenConfirmModal=!1},async onConfirmClose(){this.saveConfig(this.isShowModalConfirm),await this.onCloseModalConfirm(),this.isOpenModal=!1},onChangeCheckboxShow(){this.isShowModalConfirm=!this.isShowModalConfirm},getUserConfig(){this.userConfigRepository.search(this.userConfigCriteria,Shopware.Context.api).then(t=>{var o;t.length?this.iframeUserConfig=t.first():(this.iframeUserConfig=this.userConfigRepository.create(Shopware.Context.api),this.iframeUserConfig.key=c,this.iframeUserConfig.userId=(o=this.currentUser)==null?void 0:o.id,this.iframeUserConfig.value={isShowModalConfirm:!0})})},saveConfig(t){this.iframeUserConfig.value={isShowModalConfirm:t},this.userConfigRepository.save(this.iframeUserConfig,Shopware.Context.api).then(()=>{this.getUserConfig()})}}};export{h as default};
