import{S as s}from"./main-DLOZxWIX.js";import"./channel-D6fkBpuJ.js";import"./administration-BkFWn-Oy.js";const l=`{% block sw_cms_el_config_text %} <sw-tabs position-identifier="sw-cms-element-config-text" class="sw-cms-el-config-text__tabs" default-item="content" > <template #default="{ active }"> {% block sw_cms_el_config_text_tab_content %} <sw-tabs-item :title="$tc('sw-cms.elements.general.config.tab.content')" name="content" :active-tab="active" > {{ $tc('sw-cms.elements.general.config.tab.content') }} </sw-tabs-item> {% endblock %} {% block sw_cms_el_text_config_tab_options %} <sw-tabs-item :title="$tc('sw-cms.elements.general.config.tab.settings')" name="settings" :active-tab="active" > {{ $tc('sw-cms.elements.general.config.tab.settings') }} </sw-tabs-item> {% endblock %} </template> <template #content="{ active }" > {% block sw_cms_el_text_config_content %} <sw-container v-if="active === 'content'" class="sw-cms-el-config-text__tab-content" > <sw-cms-mapping-field v-model:config="element.config.content" :label="$tc('sw-cms.elements.text.config.label.content')" value-types="string" > <sw-text-editor :value="element.config.content.value" :allow-inline-data-mapping="true" :sanitize-info-warn="true" enable-transparent-background @update:value="onInput" @blur="onBlur" /> <template #preview="{ demoValue }"> <div class="sw-cms-el-config-text__mapping-preview"> <div v-html="$sanitize(demoValue)"></div> </div> </template> </sw-cms-mapping-field> </sw-container> {% endblock %} {% block sw_cms_el_text_config_settings %} <sw-container v-if="active === 'settings'" class="sw-cms-el-config-text__tab-settings" > {% block sw_cms_el_text_config_settings_vertical_align %} <mt-select v-model="element.config.verticalAlign.value" :label="$tc('sw-cms.elements.general.config.label.verticalAlign')" :placeholder="$tc('sw-cms.elements.general.config.label.verticalAlign')" :options="alignmentOptions" /> {% endblock %} </sw-container> {% endblock %} </template> </sw-tabs> {% endblock %}`,{Mixin:a}=Shopware,g={template:l,emits:["element-update"],mixins:[a.getByName("cms-element")],computed:{availableDataMappings(){let e=[];return Object.entries(Shopware.Store.get("cmsPage").currentMappingTypes).forEach(t=>{const[n,i]=t;n==="string"&&(e=[...e,...i])}),e},customTextEditorButtons(){return[s(()=>this.availableDataMappings)]},alignmentOptions(){return[{id:1,value:"flex-start",label:this.$tc("sw-cms.elements.general.config.label.verticalAlignTop")},{id:2,value:"center",label:this.$tc("sw-cms.elements.general.config.label.verticalAlignCenter")},{id:3,value:"flex-end",label:this.$tc("sw-cms.elements.general.config.label.verticalAlignBottom")}]}},created(){this.createdComponent()},methods:{createdComponent(){this.initElementConfig("text")},onBlur(e){this.emitChanges(e)},onInput(e){this.emitChanges(e)},emitChanges(e){e!==this.element.config.content.value&&(this.element.config.content.value=e,this.$emit("element-update",this.element))}}};export{g as default};
