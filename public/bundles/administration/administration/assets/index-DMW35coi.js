import{S as o}from"./sanitizer.helper-BI7HQCuE.js";import"./purify.es-Du9adIxO.js";const p=`{% block sw_settings_snippet_list %} <sw-page class="sw-settings-snippet-list"> {% block sw_settings_snippet_set_list_search_bar %} <template #search-bar> <sw-search-bar initial-search-type="snippet" :placeholder="$tc('sw-settings-snippet.general.placeholderSearchBarSnippets')" :initial-search="term" @search="onSearch" /> </template> {% endblock %} {% block sw_settings_snippet_list_smart_bar_header %} <template #smart-bar-header> {# Hack for fixing this problem: https://github.com/vuejs/core/issues/9308 #} <div style="display: none;"></div> {% block sw_settings_snippet_list_smart_bar_header_title %} <h2 v-if="!isLoading && snippetSets" class="sw-settings-snippet-list__smart_bar_header" > {% block sw_settings_snippet_list_smart_bar_header_title_text %} <span class="sw-settings_snippet_list__smart-bar-title-text"> {{ $tc('sw-settings-snippet.list.textSnippetList', { setName: metaName }, snippetSets.length) }} </span> {% endblock %} {% block sw_settings_snippet_list_smart_bar_header_amount %} <span class="sw-page__smart-bar-amount"> ({{ total }}) </span> {% endblock %} </h2> {% endblock %} </template> {% endblock %} {% block sw_settings_snippet_list_smart_bar_actions %} <template #smart-bar-actions> {% block sw_settings_snippet_list_smart_bar_actions_add %} <mt-button v-tooltip.bottom="getNoPermissionsTooltip('snippet.creator')" :disabled="isLoading || !acl.can('snippet.creator') || undefined" variant="primary" size="default" @click="$router.push({ name: 'sw.settings.snippet.create', query: { ids: queryIds, limit, page } })" > {{ $tc('sw-settings-snippet.list.buttonAdd') }} </mt-button> {% endblock %} </template> {% endblock %} {% block sw_settings_snippet_list_content %} <template #content> <div class="sw-settings-snippet-list__content"> {% block sw_settings_snippet_list_grid %} <sw-data-grid :is-loading="isLoading || !snippetSets" :data-source="grid" :columns="columns" class="sw-settings-snippet-list__grid" :full-page="true" :skeleton-item-amount="skeletonItemAmount" :sort-by="sortBy" :sort-direction="sortDirection" :allow-inline-edit="acl.can('snippet.editor')" :allow-column-edit="true" :show-settings="true" :show-selection="false" @column-sort="onSortColumn" @page-change="onPageChange" @inline-edit-cancel="onInlineEditCancel" @inline-edit-save="onInlineEditSave" > {% block sw_settings_salutations_list_columns %} {% block sw_settings_snippet_list_column_id %} <template #column-id="{ item, isInlineEdit }" > {% block sw_settings_snippet_list_column_id_inline_edit %} <template v-if="isInlineEdit"> {{ item.id }} </template> {% endblock %} {% block sw_settings_snippet_list_column_id_content %} <template v-else> <router-link :to="{ name: 'sw.settings.snippet.detail', params: { key: item[metaId].translationKey, origin: item[metaId].translationKey }, query: { ids: queryIds, limit, page } }" > {{ item.id }} </router-link> </template> {% endblock %} </template> {% endblock %} {% block sw_settings_snippet_list_column_value %} <template v-for="set in snippetSets" :key="set.id" #[\`column-\${set.id}\`]="{ item, compact, isInlineEdit }" > {% block sw_settings_snippet_list_column_value_inline_edit %} <template v-if="isInlineEdit"> <mt-text-field v-model="item[set.id].value" :placeholder="item[set.id].origin || $tc('sw-settings-snippet.general.placeholderValue')" :size="compact ? 'small' : 'default'" /> </template> {% endblock %} {% block sw_settings_snippet_list_column_value_content %} <template v-else> {{ item[set.id].value }} </template> {% endblock %} </template> {% endblock %} {% block sw_settings_snippet_list_grid_column_actions %} <template #actions="{ item }"> {% block sw_settings_snippet_list_grid_column_actions_edit %} <sw-context-menu-item class="sw-settings-snippet-list__edit-action" :router-link="{ name: 'sw.settings.snippet.detail', params: { key: item[metaId].translationKey, origin: item[metaId].translationKey }, query: { ids: queryIds, limit, page } }" > {{ contextMenuEditSnippet }} </sw-context-menu-item> {% endblock %} {% block sw_settings_snippet_list_grid_column_actions_delete %} <sw-context-menu-item v-tooltip.left="getNoPermissionsTooltip('snippet.deleter')" class="sw-settings-snippet-list__delete-action" variant="danger" :disabled="!acl.can('snippet.deleter') || undefined" @click="onReset(item)" > {{ $t('sw-settings-snippet.list.contextMenuDelete', item.isCustomSnippet ? 1 : 0) }} </sw-context-menu-item> {% endblock %} </template> {% endblock %} {% block sw_settings_salutation_list_action_modals %} {% block sw_settings_snippet_list_delete_modal %} <template #action-modals="{ item }" > <sw-modal v-if="showDeleteModal === item" class="sw-settings-snippet-list__delete-modal" :title="$t('global.default.warning')" variant="large" @modal-close="onCloseDeleteModal" > {% block sw_settings_snippet_list_delete_modal_text %} {% block sw_settings_snippet_list_delete_modal_text_reset %} <span v-if="!item.isCustomSnippet" class="sw-settings-snippet-list__delete-modal-confirm-reset-text" > {{ $t('sw-settings-snippet.list.textResetConfirm', { key: item[metaId].translationKey }, queryIdCount) }} </span> {% endblock %} {% block sw_settings_snippet_list_delete_modal_text_delete %} <span v-else class="sw-settings-snippet-list__delete-modal-confirm-delete-text" > {{ $t('sw-settings-snippet.list.textDeleteConfirm', { key: item[metaId].translationKey }) }} </span> {% endblock %} {% block sw_settings_snippet_list_delete_modal_grid %} <sw-grid v-if="resetItems.length > 0 && !modalDeleteAll" class="sw-settings-snippet-list__delete-modal-grid" :items="resetItems" table @sw-grid-select-item="onSelectionChanged" @sw-grid-select-all="onSelectionChanged" > {% block sw_settings_snippet_list_delete_modal_grid_template %} <template #columns="{ item }" > {% block sw_settings_snippet_list_delete_modal_grid_name %} <sw-grid-column :label="$tc('sw-settings-snippet.list.columnHeaderGridColumnTitleSet')" flex="minmax(150px, 1fr)" > {{ item.setName }} </sw-grid-column> {% endblock %} {% block sw_settings_snippet_list_delete_modal_grid_value %} <sw-grid-column :label="$tc('sw-settings-snippet.list.columnValue')" flex="minmax(50px,1fr)" > {{ item.value }} </sw-grid-column> {% endblock %} {% block sw_settings_snippet_list_delete_modal_grid_origin %} <sw-grid-column :label="$tc('sw-settings-snippet.list.columnHeaderResetTo')" flex="minmax(50px,1fr)" > {{ item.origin }} </sw-grid-column> {% endblock %} </template> {% endblock %} </sw-grid> {% endblock %} {% endblock %} {% block sw_settings_snippet_list_delete_modal_footer %} <template #modal-footer> <mt-checkbox v-model:checked="modalDeleteAll" class="sw-settings-snippet-list__delete-modal-delete-all-checkbox" :label="$t('sw-settings-snippet.list.checkboxDeleteAll', item.isCustomSnippet ? 1 : 0)" @update:checked="(checked) => modalDeleteAll = checked" /> {% block sw_settings_snippet_list_delete_modal_cancel %} <mt-button size="small" variant="secondary" @click="onCloseDeleteModal" > {{ $tc('global.default.cancel') }} </mt-button> {% endblock %} {% block sw_settings_snippet_list_delete_modal_confirm %} <mt-button :disabled="!modalDeleteAll && !hasResetableItems" variant="critical" size="small" @click="onConfirmReset(item)" > {{ $tc('sw-settings-snippet.list.contextMenuDelete', item.isCustomSnippet ? 1 : 0) }} </mt-button> {% endblock %} </template> {% endblock %} </sw-modal> </template> {% endblock %} {% endblock %} {% endblock %} {% block sw_settings_snippet_list_grid_pagination %} <template #pagination> <sw-pagination :page="page" :limit="limit" :total="total" :total-visible="7" :steps="steps" @page-change="onPageChange" /> </template> {% endblock %} </sw-data-grid> {% endblock %} </div> </template> <template #sidebar> {% block sw_settings_snippet_list_grid_sidebar %} <sw-settings-snippet-sidebar class="sw-settings-snippet-list__grid-sidebar" :filter-items="filterItems" :author-filters="authorFilters" :filter-settings="filterSettings" @sidebar-reset-all="onResetAll" @change="onChange" @sw-sidebar-collaps-refresh-grid="getList" @sw-sidebar-close="onSidebarClose" /> {% endblock %} </template> {% endblock %} </sw-page> {% endblock %}`,{Mixin:d,Data:{Criteria:a}}=Shopware,u={template:p,inject:["snippetSetService","snippetService","userService","repositoryFactory","acl","userConfigService"],mixins:[d.getByName("sw-settings-list")],data(){return{entityName:"snippet",sortBy:"id",sortDirection:"ASC",metaId:"",currentAuthor:"",snippetSets:null,hasResetableItems:!0,showOnlyEdited:!1,showOnlyAdded:!1,emptySnippets:!1,grid:[],resetItems:[],filterItems:[],authorFilters:[],appliedFilter:[],appliedAuthors:[],emptyIcon:this.$route.meta.$module.icon,skeletonItemAmount:25,filterSettings:null,modalDeleteAll:!1}},metaInfo(){return{title:this.$createTitle(this.identifier)}},computed:{identifier(){return this.snippetSets?this.$tc("sw-settings-snippet.list.identifier",{setName:this.metaName},this.snippetSets.length):""},columns(){return this.getColumns()},snippetRepository(){return this.repositoryFactory.create("snippet")},snippetSetRepository(){return this.repositoryFactory.create("snippet_set")},queryIds(){return Array.isArray(this.$route.query.ids)?this.$route.query.ids:[this.$route.query.ids]},snippetSetCriteria(){const e=new a(1,25);return e.addFilter(a.equalsAny("id",this.queryIds)),e.addSorting(a.sort("name","ASC")),this.term&&e.setTerm(this.term),e},queryIdCount(){return this.queryIds.length},metaName(){var e;return(e=this.snippetSets[0])==null?void 0:e.name},filter(){const e={};return this.showOnlyEdited&&(e.edited=!0),this.showOnlyAdded&&(e.added=!0),this.emptySnippets&&(e.empty=!0),this.term&&(e.term=this.term),this.appliedFilter.length>0&&(e.namespace=this.appliedFilter),this.appliedAuthors.length>0&&(e.author=this.appliedAuthors),e},contextMenuEditSnippet(){return this.acl.can("snippet.editor")?this.$tc("global.default.edit"):this.$tc("global.default.view")},hasActiveFilters(){return this.filterSettings?Object.values(this.filterSettings).some(e=>e===!0):!1},activeFilters(){let e={};return this.hasActiveFilters&&(this.filterSettings.editedSnippets&&(e={...e,edited:!0}),this.filterSettings.addedSnippets&&(e={...e,added:!0}),this.filterSettings.emptySnippets&&(e={...e,empty:!0}),e={...e,author:[]},this.authorFilters.forEach(t=>{this.filterSettings[t]===!0&&e.author.push(t)}),e={...e,namespace:[]},this.filterItems.forEach(t=>{this.filterSettings[t]===!0&&e.namespace.push(t)})),e}},created(){this.createdComponent()},beforeUnmount(){this.beforeDestroyComponent()},methods:{async createdComponent(){this.addEventListeners(),this.snippetSetRepository.search(this.snippetSetCriteria).then(i=>{this.snippetSets=i}),this.userService.getUser().then(i=>{this.currentAuthor=`user/${i.data.username}`});const e=await this.snippetService.getFilter();this.filterItems=e.data;const t=await this.snippetSetService.getAuthors();this.authorFilters=t.data,await this.getFilterSettings(),this.hasActiveFilters&&this.initializeSnippetSet(this.activeFilters)},beforeDestroyComponent(){this.saveUserConfig(),this.removeEventListeners()},addEventListeners(){window.addEventListener("beforeunload",e=>this.beforeUnloadListener(e))},removeEventListeners(){window.removeEventListener("beforeunload",e=>this.beforeUnloadListener(e))},beforeUnloadListener(e){this.saveUserConfig()},async getFilterSettings(){const e=await this.getUserConfig();this.filterSettings=e.data["grid.filter.setting-snippet-list"]?e.data["grid.filter.setting-snippet-list"]:this.createFilterSettings()},getUserConfig(){return this.userConfigService.search(["grid.filter.setting-snippet-list"])},saveUserConfig(){return this.userConfigService.upsert({"grid.filter.setting-snippet-list":this.filterSettings})},createFilterSettings(){const e=this.authorFilters.reduce((i,n)=>({...i,[n]:!1}),{}),t=this.filterItems.reduce((i,n)=>({...i,[n]:!1}),{});return{emptySnippets:!1,editedSnippets:!1,addedSnippets:!1,...e,...t}},getList(){this.hasActiveFilters?this.initializeSnippetSet(this.activeFilters):this.initializeSnippetSet()},getColumns(){const e=[{property:"id",label:"sw-settings-snippet.list.columnKey",inlineEdit:!0,allowResize:!0,rawData:!0,primary:!0}];return this.snippetSets&&this.snippetSets.forEach(t=>{e.push({property:t.id,label:t.name,allowResize:!0,inlineEdit:"string",rawData:!0})}),e},initializeSnippetSet(e=this.filter){if(!this.$route.query.ids){this.backRoutingError();return}this.isLoading=!0;const t={sortBy:this.sortBy,sortDirection:this.sortDirection};this.snippetSetService.getCustomList(this.page,this.limit,e,t).then(i=>{this.metaId=this.queryIds[0],this.total=i.total,this.grid=this.prepareGrid(i.data),this.isLoading=!1})},prepareGrid(e){function t(i){const n=i.reduce((s,l)=>(l.resetTo=l.value,s[l.setId]=l,s.isCustomSnippet=l.author.includes("user/")||l.author.length<1,s),{});return n.id=i[0].translationKey,n}return Object.values(e).reduce((i,n)=>(i.push(t(n)),i),[])},onEdit(e){e!=null&&e.id&&this.$router.push({name:"sw.settings.snippet.detail",params:{id:e.id}})},onInlineEditSave(e){const t=[],i=e[this.metaId].translationKey;this.snippetSets.forEach(n=>{const s=e[n.id];if(s.value=o.sanitize(s.value),!s.value&&typeof s.value!="string"&&(s.value=s.origin),(!s.hasOwnProperty("author")||s.author==="")&&(s.author=this.currentAuthor),s.origin!==s.value){const l=this.snippetRepository.create();s.id&&(l._isNew=!1),l.author=s.author,l.id=s.id,l.value=s.value,l.origin=s.origin,l.translationKey=s.translationKey,l.setId=s.setId,t.push(this.snippetRepository.save(l))}else s.id!==null&&!s.author.startsWith("user/")&&t.push(this.snippetRepository.delete(s.id))}),Promise.all(t).catch(()=>{this.inlineSaveErrorMessage(i)}).finally(()=>{this.getList()})},onInlineEditCancel(e){Object.keys(e).forEach(t=>{const i=e[t];typeof i!="object"||i.value===void 0||(i.value=i.resetTo)})},onEmptyClick(){this.showOnlyEdited=!1,this.getList()},onSearch(e){this.term=e,this.page=1,this.updateRoute({term:e,page:1},{ids:this.queryIds})},backRoutingError(){this.$router.push({name:"sw.settings.snippet.index"}),this.createNotificationError({message:this.$tc("sw-settings-snippet.general.errorBackRoutingMessage")})},inlineSaveSuccessMessage(e){const t=this.$tc("sw-settings-snippet.list.messageSaveSuccess",{key:e},this.queryIdCount);this.createNotificationSuccess({message:t})},inlineSaveErrorMessage(e){const t=this.$tc("sw-settings-snippet.list.messageSaveError",{key:e},this.queryIdCount);this.createNotificationError({message:t})},onReset(e){this.isLoading=!0,this.hasResetableItems=!1,this.snippetSetRepository.search(this.snippetSetCriteria).then(t=>{const i=[],n=Array.isArray(this.$route.query.ids)?this.$route.query.ids:[this.$route.query.ids];Object.values(e).forEach((s,l)=>{!(s instanceof Object)||!n.find(r=>r===s.setId)||(s.setName=this.getName(t,s.setId),s.id===null&&(s.id=l,s.isFileSnippet=!0),i.push(s))}),this.resetItems=i.sort((s,l)=>s.setName<=l.setName?-1:1),this.showDeleteModal=e}).finally(()=>{this.isLoading=!1})},getName(e,t){let i="";return e.forEach(n=>{n.id===t&&(i=n.name)}),i},onSelectionChanged(e){this.snippetSelection=e,this.hasResetableItems=e&&Object.keys(e).length!==0},onCloseDeleteModal(){this.showDeleteModal=!1,this.modalDeleteAll=!1,this.hasResetableItems=!1,this.resetItems=[]},onConfirmReset(e){let t;const i=[];if(this.showOnlyEdited||this.modalDeleteAll)t=Object.values(e).filter(n=>typeof n=="object");else if(this.snippetSelection!==void 0)t=Object.values(this.snippetSelection);else{this.onCloseDeleteModal();return}this.onCloseDeleteModal(),t.forEach(n=>{n.hasOwnProperty("isFileSnippet")||n.id===null||(n.translationKey&&typeof n.translationKey!="string"&&(n.translationKey=`${n.translationKey}`),n.isCustomSnippet=e.isCustomSnippet,this.isLoading=!0,i.push(this.snippetRepository.delete(n.id).catch(()=>{this.createResetErrorNote(n)})),Promise.all(i).finally(()=>{this.isLoading=!1,this.getList()}))})},createSuccessMessage(e){const t=this.$t("sw-settings-snippet.list.resetSuccessMessage",{key:e.value},e.isCustomSnippet?0:1);this.createNotificationSuccess({message:t})},createResetErrorNote(e){const t=this.$t("sw-settings-snippet.list.resetErrorMessage",{key:e.value},e.isCustomSnippet?0:1);this.createNotificationError({message:t})},onChange(e){if(this.filterSettings[[e.name]]=e.value,this.page=1,e.group==="editedSnippets"){this.showOnlyEdited=e.value,this.initializeSnippetSet();return}if(e.group==="addedSnippets"){this.showOnlyAdded=e.value,this.initializeSnippetSet();return}if(e.group==="emptySnippets"){this.emptySnippets=e.value,this.initializeSnippetSet();return}let t="appliedFilter";if(e.group==="authorFilter"&&(t="appliedAuthors"),e.value){if(this[t].indexOf(e.name)!==-1)return;this[t].push(e.name),this.initializeSnippetSet();return}this[t].splice(this[t].indexOf(e.name),1),this.initializeSnippetSet()},onSidebarClose(){this.showOnlyEdited=!1,this.emptySnippets=!1,this.appliedAuthors=[],this.appliedFilter=[],this.initializeSnippetSet()},onSortColumn(e){this.sortDirection==="ASC"&&e.dataIndex===this.sortBy?this.sortDirection="DESC":this.sortDirection="ASC",this.updateRoute({sortDirection:this.sortDirection,sortBy:e.dataIndex},{ids:this.queryIds})},onPageChange({page:e,limit:t}){this.updateRoute({page:e,limit:t},{ids:this.queryIds})},getNoPermissionsTooltip(e,t=!0){return{showDelay:300,appearance:"dark",showOnDisabledElements:t,disabled:this.acl.can(e),message:this.$tc("sw-privileges.tooltip.warning")}},onResetAll(){this.showOnlyEdited=!1,this.showOnlyAdded=!1,this.emptySnippets=!1,this.appliedFilter=[],this.appliedAuthors=[],Object.keys(this.filterSettings).forEach(e=>{this.filterSettings[e]=!1}),this.initializeSnippetSet({})}}};export{u as default};
