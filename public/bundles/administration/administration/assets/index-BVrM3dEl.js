import{d as i}from"./camelCase-AQftrnVC.js";import"./channel-D6fkBpuJ.js";const l=`{% block sw_settings_country_address_handling %} <div class="sw-settings-country-address-handling"> {% block sw_settings_country_address_handling_options %} <mt-card position-identifier="sw-settings-country-address-handling-options" :title="$tc('sw-settings-country.detail.titleOptions')" :is-loading="isLoading" > <sw-container class="sw-settings-country-address-handling__options-container"> <mt-switch :model-value="country.forceStateInRegistration" class="sw-settings-country-address-handling__option-items" bordered :disabled="!acl.can('country.editor') || undefined" :label="$tc('sw-settings-country.detail.labelForceStateInRegistration')" @update:model-value="updateCountry('forceStateInRegistration', $event)" /> <mt-switch :model-value="country.postalCodeRequired" class="sw-settings-country-address-handling__option-items" bordered :disabled="!acl.can('country.editor') || undefined" :label="$tc('sw-settings-country.detail.labelPostalCodeRequired')" @update:model-value="updateCountry('postalCodeRequired', $event)" /> <mt-switch :model-value="country.checkPostalCodePattern" class="sw-settings-country-address-handling__option-items" bordered :disabled="!hasDefaultPostalCodePattern || !acl.can('country.editor') || undefined" :label="$tc('sw-settings-country.detail.labelCheckPostalCodePattern')" :help-text="$tc('sw-settings-country.detail.helpTextCheckPostalCodePattern')" @update:model-value="updateCountry('checkPostalCodePattern', $event)" /> <div class="sw-settings-country-address-handling__option-items advanced-postal-code"> <mt-switch :model-value="country.checkAdvancedPostalCodePattern" class="sw-settings-country-address-handling__option-items" :disabled="!acl.can('country.editor') || disabledAdvancedPostalCodePattern || undefined" :label="$tc('sw-settings-country.detail.labelCheckAdvancedPostalCodePattern')" :help-text="$tc('sw-settings-country.detail.helpTextAdvancedPostalCodePattern', {5: '{5}', 4: '{4}', 2: '{2}'}, 0)" @update:model-value="updateCountry('checkAdvancedPostalCodePattern', $event)" /> <mt-text-field :model-value="country.advancedPostalCodePattern" class="sw-settings-country-address-handling__text-field" :class="{'is--disabled': !country.checkAdvancedPostalCodePattern}" :disabled="!acl.can('country.editor') || undefined" :placeholder="$tc('sw-settings-country.detail.placeholderAdvancedPostalCodePattern')" @update:model-value="updateCountry('advancedPostalCodePattern', $event)" /> </div> </sw-container> </mt-card> {% endblock %} {% block sw_settings_country_address_handling_formatting %} <mt-card position-identifier="sw-settings-country-address-handling-formatting" :title="$tc('sw-settings-country.detail.titleFormatting')" :is-loading="isLoading" > <sw-container class="sw-settings-country-address-handling__options-container"> <div class="sw-settings-country-address-handling__address-markup"> <sw-multi-snippet-drag-and-drop v-for="(snippet, index) in addressFormat" :key="index" v-droppable="{ data: { snippet, index }, dragGroup: 'sw-multi-snippet' }" v-draggable="{ ...dragConf, data: { snippet, index }}" :value="snippet" :line-position="index" :get-label-property="getLabelProperty" :total-lines="addressFormat.length" @update:value="change" @drop-end="onDropEnd" @position-move="moveToNewPosition" @add-new-line="addNewLineAt" @open-snippet-modal="openSnippetModal" /> </div> <div class="sw-settings-country-address-handling__address-preview"> <div class="sw-card__title"> {{ $tc('sw-settings-country.detail.previewTitle') }} </div> <sw-entity-single-select v-model:value="customerId" class="sw-settings-country-address-handling__customer-select" :label="$tc('sw-settings-country.detail.labelCustomer')" :placeholder="$tc('sw-settings-country.detail.placeholderSelectCustomer')" entity="customer" show-clearable-button :criteria="customerCriteria" :label-callback="customerLabel" @update:value="onChangeCustomer" /> <sw-settings-country-preview-template :formatting-address="formattingAddress" /> <mt-button class="sw-settings-country-address-handling__button-reset" variant="critical" ghost @click="resetMarkup" > {{ $tc('sw-settings-country.detail.buttonResetMarkup') }} </mt-button> </div> </sw-container> </mt-card> <sw-settings-country-new-snippet-modal v-if="isOpenModal" :selections="snippets" :current-position="currentPosition" :address-format="addressFormat" :get-label-property="getLabelProperty" @change="change" @modal-close="onCloseModal" /> {% endblock %} </div> {% endblock %}`,{Component:c}=Shopware,{Criteria:u}=Shopware.Data,{cloneDeep:a}=Shopware.Utils.object,p=[["address/company","symbol/dash","address/department"],["address/first_name","address/last_name"],["address/street"],["address/zipcode","address/city"],["address/country"]],g=c.wrapComponentConfig({template:l,inject:["acl","customSnippetApiService"],props:{country:{type:Object,required:!0},isLoading:{type:Boolean,required:!0}},data(){return{advancedPostalCodePattern:null,draggedItem:null,droppedItem:null,snippets:[],customerId:null,customer:null,isOpenModal:!1,currentPosition:null,formattingAddress:""}},computed:{customerCriteria(){const t=new u(1,null);return t.addAssociation("salutation").addAssociation("defaultBillingAddress.country").addAssociation("defaultBillingAddress.countryState").addAssociation("defaultBillingAddress.salutation"),t},dragConf(){return{delay:200,dragGroup:"sw-multi-snippet",validDragCls:"is--valid-drag",onDragStart:this.onDragStart,onDragEnter:this.onDragEnter,onDrop:this.onDrop,preventEvent:!1}},addressFormat(){return this.country.addressFormat},hasDefaultPostalCodePattern(){return!!this.country.defaultPostalCodePattern},disabledAdvancedPostalCodePattern(){return this.hasDefaultPostalCodePattern?!this.country.checkPostalCodePattern:!1}},watch:{"country.checkPostalCodePattern"(t){t||this.updateCountry("checkAdvancedPostalCodePattern",!1)},"country.checkAdvancedPostalCodePattern"(t){var e;if(t){if(this.country.advancedPostalCodePattern&&!this.advancedPostalCodePattern)return;this.$emit("update:country","advancedPostalCodePattern",this.advancedPostalCodePattern||this.country.defaultPostalCodePattern);return}this.hasDefaultPostalCodePattern||this.updateCountry("checkPostalCodePattern",t),this.advancedPostalCodePattern=((e=this.country)==null?void 0:e.advancedPostalCodePattern)??null,this.updateCountry("advancedPostalCodePattern",null)},"country.addressFormat"(t){var e;t&&this.renderFormattingAddress((e=this.customer)==null?void 0:e.defaultBillingAddress)}},created(){this.createdComponent()},methods:{createdComponent(){this.advancedPostalCodePattern=a(this.country.advancedPostalCodePattern),this.getSnippets()},onDragStart(t,e,s){this.draggedItem=t.data},onDragEnter(t,e){this.draggedItem&&(!t||!e||(this.droppedItem=e))},onDrop(t,e){var s,n,d;!((s=this.addressFormat)!=null&&s.length)||!this.droppedItem||!this.draggedItem||[(n=this.draggedItem)==null?void 0:n.index,(d=this.droppedItem)==null?void 0:d.index].every(r=>typeof r=="number")&&(this.country.addressFormat=Object.assign([],this.country.addressFormat,{[this.draggedItem.index]:this.country.addressFormat[this.droppedItem.index],[this.droppedItem.index]:this.country.addressFormat[this.draggedItem.index]}),this.draggedItem=null,this.droppedItem=null)},onDropEnd(t,{dragData:e,dropData:s}){if(typeof(s==null?void 0:s.linePosition)=="number"&&typeof(e==null?void 0:e.linePosition)=="number"&&e.linePosition!==s.linePosition){this.$emit("update:country",`addressFormat[${e.linePosition}][${e.index}]`,s.snippet),this.$emit("update:country",`addressFormat[${s.linePosition}][${s.index}]`,e.snippet);return}this.$emit("update:country",`addressFormat[${s.index}]`,[...this.country.addressFormat[s.index],e.snippet]),this.country.addressFormat[t].splice(e.index,1),this.updateCountry(`addressFormat[${t}]`,this.country.addressFormat[t])},moveToNewPosition(t,e){if(!this.addressFormat)return;e=typeof e!="number"?this.addressFormat.length-1:e;const s=this.country.addressFormat[t];this.updateCountry("addressFormat",this.swapPosition(t,e,[s])??[])},addNewLineAt(t,e){var d;if(!((d=this.addressFormat)!=null&&d.length))return;const s=this.addressFormat[t],n=e==="above"?[[],s]:[s,[]];this.updateCountry("addressFormat",this.swapPosition(t,t,n)??[])},swapPosition(t,e,s){var d;if(!((d=this.addressFormat)!=null&&d.length))return null;const n=[...this.country.addressFormat.filter((r,o)=>o!==t)];return n.splice(e,0,...s),n},change(t,e){if(!e){this.updateCountry("addressFormat",this.addressFormat.filter((s,n)=>t!==n));return}this.updateCountry(`addressFormat[${t}]`,e)},customerLabel(t){return t?`${t.firstName}, ${t.lastName}`:""},onChangeCustomer(t,e){this.customer=null,!(!t||!e)&&(this.customer=e,this.renderFormattingAddress(this.customer.defaultBillingAddress))},resetMarkup(){this.updateCountry("addressFormat",a(p))},openSnippetModal(t){this.isOpenModal=!0,this.currentPosition=t},onCloseModal(){this.currentPosition=null,this.isOpenModal=!1},getSnippets(){return this.customSnippetApiService.snippets().then(t=>{const e=t.data;this.snippets=e==null?void 0:e.map(s=>({id:s,name:this.getLabelProperty(s)}))}).catch(()=>{})},renderFormattingAddress(t){return t?this.customSnippetApiService.render(t,this.country.addressFormat).then(e=>{const{rendered:s}=e;this.formattingAddress=s}):(this.formattingAddress="",Promise.resolve())},getLabelProperty(t){const e=t.split("/").map(s=>i(s)).join(".");return this.$te(`sw-custom-snippet.${e}`)?this.$tc(`sw-custom-snippet.${e}`):t},updateCountry(t,e){this.$emit("update:country",t,e)}}});export{g as default};
