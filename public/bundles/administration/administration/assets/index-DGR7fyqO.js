import{B as g}from"./channel-D6fkBpuJ.js";import{o as l,Q as v,N as n,G as o,q as c,t as p,u as w}from"./main-DLOZxWIX.js";import{g as h,e as t,r as u,u as r}from"./permissions-Cb6wGjLU.js";import"./administration-BkFWn-Oy.js";const f=`<sw-page class="sw-settings-services-index"> <template #smart-bar-header> <h2> {{ $t('sw-settings.index.tabSystem') }} <mt-icon name="regular-chevron-right-xs" size="12px" /> {{ $t('sw-settings-services.general.title') }} </h2> </template> <template v-if="!suspended" #content > <sw-settings-services-hero :documentation-link="currentRevision.links['docs-url']" :feedback-link="currentRevision.links['feedback-url']" /> <div class="sw-settings-services-index__content"> <sw-settings-services-grant-permissions-card v-if="!consentGiven && !config.disabled && services.length > 0" :docs-link="currentRevision.links['docs-url']" /> <div class="sw-settings-services__listing-section"> <h3> {{ $t('sw-settings-services.index.available-services') }} </h3> <mt-banner v-if="loadingError !== ''" variant="critical" > <p><b>{{ $t('sw-settings-services.exception.service-list') }}</b></p> <p>{{ loadingError }}</p> </mt-banner> <mt-banner v-if="config.disabled" class="sw-settings-services-index__services-deactivated-banner" variant="attention" > <p><b>{{ $t('sw-settings-services.index.services-are-disabled') }}</b></p> <p>{{ $t('sw-settings-services.index.services-are-disabled-cta') }}</p> <mt-button variant="primary" size="small" @click="activateServices" > {{ $t('sw-settings-services.index.services-are-disabled-button-label') }} </mt-button> </mt-banner> <div v-else-if="services.length === 0" class="sw-settings-services-index__installing-card" > <div class="sw-settings-services-index__installing-card-loader"> <mt-loader size="var(--scale-size-32)" /> </div> <p class="sw-settings-services-index__installing-card-title"> {{ $t('sw-settings-services.index.installing-services-title') }} </p> <p>{{ $t('sw-settings-services.index.installing-services-description') }}</p> </div> <ul v-else class="sw-settings-services__available-services" > <sw-settings-services-service-card v-for="service in services" :key="service.name" :service="service" /> </ul> </div> <div class="sw-settings-services__footer"> <a class="mt-link--external" :href="currentRevision.links['docs-url']" target="_blank" > {{ $t('sw-settings-services.index.label-documentation-link') }} </a> <a class="mt-link--external" :href="currentRevision.links['tos-url']" target="_blank" > {{ $t('sw-settings-services.index.label-tos-link') }} </a> <sw-settings-services-revoke-permissions-modal v-if="!config.disabled && config.permissionsConsent" /> <sw-settings-services-deactivate-modal v-if="!config.disabled" :feedback-link="currentRevision.links['feedback-url']" /> </div> </div> </template> </sw-page>`,S=`<div class="sw-settings-services-hero"> <sw-settings-services-framed-icon class="sw-settings-services-hero__image-editor-left" :image-url="assets.imageEditor" size="var(--scale-size-56)" /> <sw-settings-services-framed-icon class="sw-settings-services-hero__copilot-left" :image-url="assets.copilot" size="var(--scale-size-80)" /> <sw-settings-services-framed-icon class="sw-settings-services-hero__preview-generator-left" :image-url="assets.previewGenerator" size="var(--scale-size-40)" /> <sw-settings-services-framed-icon class="sw-settings-services-hero__copilot-right" :image-url="assets.copilot" size="var(--scale-size-40)" /> <sw-settings-services-framed-icon class="sw-settings-services-preview-generator-right" :image-url="assets.previewGenerator" size="var(--scale-size-80)" /> <sw-settings-services-framed-icon class="sw-settings-services-hero__image-editor-right" :image-url="assets.imageEditor" size="var(--scale-size-56)" /> <div class="sw-settings-services-hero__gradient"> <div class="sw-settings-services-hero__content"> <h3>{{ $t('sw-settings-services.sw-settings-services-hero.title') }}</h3> <p>{{ $t('sw-settings-services.sw-settings-services-hero.intro') }}</p> <ul class="sw-settings-services-hero__bullet-points"> <li> <mt-icon name="solid-check-circle" size="var(--scale-size-16)" color="var(--color-icon-positive-default)" /> <span>{{ $t('sw-settings-services.sw-settings-services-hero.bullet-point-integrated') }}</span> </li> <li> <mt-icon name="solid-check-circle" size="var(--scale-size-16)" color="var(--color-icon-positive-default)" /> <span>{{ $t('sw-settings-services.sw-settings-services-hero.bullet-point-flexible') }}</span> </li> <li> <mt-icon name="solid-check-circle" size="var(--scale-size-16)" color="var(--color-icon-positive-default)" /> <span>{{ $t('sw-settings-services.sw-settings-services-hero.bullet-point-transparent') }}</span> </li> <li> <mt-icon name="solid-check-circle" size="var(--scale-size-16)" color="var(--color-icon-positive-default)" /> <span>{{ $t('sw-settings-services.sw-settings-services-hero.bullet-point-scalable') }}</span> </li> </ul> <div class="sw-settings-services-hero__actions"> <mt-button variant="secondary" :link="feedbackLink" > {{ $t('sw-settings-services.sw-settings-services-hero.give-feedback')}} <template #iconBack="{ size }"> <mt-icon name="solid-external-link" :size="size" /> </template> </mt-button> <mt-link as="a" target="_blank" rel="noopener noreferrer" :href="documentationLink" type="external" > {{ $t('sw-settings-services.sw-settings-services-hero.learn-more') }} </mt-link> </div> </div> </div> <div class="sw-settings-services-hero__border-bottom"></div> </div>`,b='<div class="sw-settings-services-framed-icon" :style="`font-size: ${size}`" > <div class="sw-settings-services-framed-icon__outer-frame sw-settings-services-framed-icon__frame"> <div class="sw-settings-services-framed-icon__second-frame sw-settings-services-framed-icon__frame"> <div class="sw-settings-services-framed-icon__inner-frame sw-settings-services-framed-icon__frame"> <img class="sw-settings-services-framed-icon__image" alt="" :src="imageUrl" > </div> </div> </div> </div>',_=Shopware.Component.wrapComponentConfig({name:"sw-settings-services-framed-icon",template:b,props:{imageUrl:{type:String,required:!0},size:{type:String,required:!0}}}),k=Shopware.Component.wrapComponentConfig({name:"sw-settings-services-hero",template:S,components:{swSettingsServicesFramedIcon:_},props:{feedbackLink:{type:String,required:!0},documentationLink:{type:String,required:!0}},data(){const e=Shopware.Filter.getByName("asset");return{assets:{imageEditor:e("/administration/administration/static/img/services/image-editor.svg"),previewGenerator:e("/administration/administration/static/img/services/3d-preview-generator.svg"),copilot:e("/administration/administration/static/img/services/copilot.svg")}}}}),$='<mt-card class="sw-settings-services-grant-permission-card"> <div class="sw-settings-services-grant-permission-card__background"> <img :src="grantPermissionsCardBackground" alt="" > </div> <h3 class="sw-settings-services-grant-permission-card__heading"> {{ $t("sw-settings-services.grant-permissions.title") }} </h3> <p>{{ $t("sw-settings-services.grant-permissions.description") }}</p> <div class="sw-settings-services-grant-permission-card__actions"> <mt-button variant="primary" :is-loading="isLoading" @click="grantPermissions" > {{ $t("sw-settings-services.grant-permissions.label-button-grant-permissions") }} </mt-button> <mt-link variant="primary" as="a" type="external" :href="docsLink" target="_blank" > {{ $t("sw-settings-services.grant-permissions.label-link-more-information") }} </mt-link> </div> </mt-card>',x=Shopware.Component.wrapComponentConfig({name:"sw-settings-services-grant-permissions-card",template:$,emits:["service-permissions-granted"],props:{docsLink:{type:String,required:!0}},data(){return{grantPermissionsCardBackground:Shopware.Filter.getByName("asset")("/administration/administration/static/img/services/grant-permissions-background.svg"),isLoading:!1}},methods:{async grantPermissions(){try{this.isLoading=!0,await h()}catch(e){Shopware.Store.get("notification").createNotification({variant:"critical",title:this.$t("global.default.error"),message:t(e)})}finally{this.isLoading=!1}}}}),y=`<mt-modal-root> <mt-modal :title="$t('sw-settings-services.revoke-permissions-modal.title')"> <div class="sw-settings-services-revoke-permissions-modal__content"> <p>{{ $t('sw-settings-services.revoke-permissions-modal.p-1') }}</p> <p>{{ $t('sw-settings-services.revoke-permissions-modal.p-2') }}</p> </div> <template #footer> <div class="sw-settings-services-revoke-permissions-modal__footer"> <mt-modal-close as="mt-button" variant="secondary" > {{ $t('global.default.cancel') }} </mt-modal-close> <mt-modal-action as="mt-button" variant="critical" :is-loading="isLoading" @click="revokePermissions" > {{ $t('sw-settings-services.revoke-permissions-modal.label-button-revoke-permissions') }} </mt-modal-action> </div> </template> </mt-modal> <mt-modal-trigger as="button"> {{ $t('sw-settings-services.revoke-permissions-modal.label-button-revoke-permissions') }} </mt-modal-trigger> </mt-modal-root>`,M=Shopware.Component.wrapComponentConfig({name:"sw-settings-services-revoke-permissions-modal",template:y,components:{MtModalRoot:c,MtModal:o,MtModalAction:n,MtModalTrigger:v,MtModalClose:l},emits:["service-permissions-revoked"],data(){return{isLoading:!1}},methods:{async revokePermissions(e){try{this.isLoading=!0,await u()}catch(s){Shopware.Store.get("notification").createNotification({variant:"critical",title:this.$t("global.default.error"),message:t(s)})}finally{this.isLoading=!1,e()}}}}),C=`<mt-modal-root> <mt-modal :title="$t('sw-settings-services.deactivate-modal.title')"> <div class="sw-settings-services-deactivate-modal__content"> <p>{{ $t('sw-settings-services.deactivate-modal.p-1') }}</p> <p>{{ $t('sw-settings-services.deactivate-modal.p-2') }}</p> <mt-link type="external" as="a" target="_blank" :href="feedbackLink" > {{ $t('sw-settings-services.deactivate-modal.label-feedback-link') }} </mt-link> </div> <template #footer> <div class="sw-settings-services-deactivate-modal__footer"> <mt-modal-close as="mt-button" variant="secondary" > {{ $t('global.default.cancel') }} </mt-modal-close> <mt-modal-action as="mt-button" variant="critical" :is-loading="isLoading" @click="disableServices" > {{ $t('sw-settings-services.general.deactivate') }} </mt-modal-action> </div> </template> </mt-modal> <mt-modal-trigger as="button"> {{ $t('sw-settings-services.general.deactivate') }} </mt-modal-trigger> </mt-modal-root>`,z=Shopware.Component.wrapComponentConfig({name:"sw-settings-services-deactivate-modal",template:C,components:{MtModalRoot:c,MtModal:o,MtModalAction:n,MtModalTrigger:v,MtModalClose:l},props:{feedbackLink:{type:String}},data(){return{isLoading:!1}},methods:{async disableServices(e){this.isLoading=!0;try{await Shopware.Service("shopwareServicesService").disableAllServices(),window.location.reload()}catch(s){Shopware.Store.get("notification").createNotification({title:this.$t("global.default.error"),variant:"critical",message:t(s),autoClose:!1})}finally{this.isLoading=!1}e()}}}),L=`<li class="sw-settings-services-service-card"> <div class="sw-settings-services-service-card__content"> <div class="sw-settings-services-service-card__header"> <sw-extension-icon class="sw-settings-services-service-card__icon" :src="icon" :alt="\`Icon for \${service.name}\`" /> <div> <h4>{{ service.label }}</h4> <sw-status :color="serviceStatus" > {{ $t(statusText) }} </sw-status> </div> <mt-popover :child-views="[{ name: 'base' }]" > <template #trigger="{ toggleFloatingUi }" > <mt-button variant="secondary" square @click="toggleFloatingUi" > <mt-icon name="solid-ellipsis-h-s" /> </mt-button> </template> <template #popover-items__base="{ toggleFloatingUi }"> <mt-popover-item v-if="!service.active" :label="$t('sw-settings-services.general.activate')" :disabled="isLoading" :on-label-click="() => setActive(true, toggleFloatingUi)" /> <mt-popover-item v-if="service.active" :label="$t('sw-settings-services.general.deactivate')" :disabled="isLoading" :on-label-click="() => openDeactivateModal(toggleFloatingUi)" /> <mt-popover-item :label="$t('sw-settings-services.service-card.permissions')" :on-label-click="() => openPermissionsModal(toggleFloatingUi)" /> </template> </mt-popover> </div> <div class="sw-settings-services-service-card__description"> {{ service.description }} </div> <div class="sw-settings-services-service-card__footer"> {{ $t('sw-settings-services.service-card.updated-at-label', { updatedAt: updatedAt }) }} • {{ $t('sw-settings-services.service-card.version', { version: readableVersion }) }} </div> </div> <mt-modal-root :is-open="showDeactivateModal" @change="showDeactivateModal = $event" > <mt-modal :title="$t('sw-settings-services.general.deactivate')"> <div class="sw-settings-services-service-card__deactivate-modal-content"> <p>{{ $t('sw-settings-services.service-card.deactivate-modal.warning', { serviceName: service.label }) }}</p> <p>{{ $t('sw-settings-services.service-card.deactivate-modal.consequences') }}</p> </div> <template #footer> <div class="sw-settings-services-service-card__deactivate-modal-footer"> <mt-modal-action as="mt-button" variant="secondary" @click="showDeactivateModal = false" > {{ $t('global.default.cancel') }} </mt-modal-action> <mt-modal-action as="mt-button" variant="critical" :is-loading="isLoading" @click="setActive(false, () => { showDeactivateModal = false })" > {{ $t('sw-settings-services.general.deactivate') }} </mt-modal-action> </div> </template> </mt-modal> </mt-modal-root> <sw-extension-permissions-modal v-if="showPermissionsModal" :extension-label="service.label" :permissions="categorizedPermissions" :domains="service.domains" @modal-close="showPermissionsModal = false" /> </li>`,P=Shopware.Component.wrapComponentConfig({name:"sw-settings-services-service-card",template:L,components:{MtPopoverItem:p,MtModalAction:n,MtModalRoot:c,MtModal:o},props:{service:{required:!0,type:Object}},data(){return{showDeactivateModal:!1,showPermissionsModal:!1,categorizedPermissions:null,isLoading:!1}},computed:{icon(){return this.service.icon?`data:image/png;base64, ${this.service.icon}`:Shopware.Filter.getByName("asset")("/administration/administration/static/img/services/extension-icon-placeholder.svg")},serviceStatus(){return this.service.active?this.service.requested_privileges.length===0?"green":"orange":"red"},statusText(){switch(this.serviceStatus){case"green":return"sw-settings-services.service-card.status-active";case"orange":return"sw-settings-services.service-card.status-awaiting-permissions";case"red":default:return"sw-settings-services.service-card.status-inactive"}},updatedAt(){return this.dateFilter(this.service.updated_at,{month:"2-digit",day:"2-digit",year:"numeric",hour:void 0,minute:void 0,second:void 0})},readableVersion(){return this.service.version.split("-")[0]},dateFilter(){return Shopware.Filter.getByName("date")}},methods:{openDeactivateModal(e){this.showDeactivateModal=!0,e()},async setActive(e,s){this.isLoading=!0;try{const i=Shopware.Service("shopwareExtensionService");e?await i.activateExtension(this.service.name,"app"):await i.deactivateExtension(this.service.name,"app"),window.location.reload()}catch(i){Shopware.Store.get("notification").createNotification({variant:"critical",message:t(i)})}finally{this.isLoading=!1}s&&s()},async openPermissionsModal(e){try{if(this.categorizedPermissions===null){const s=Shopware.Service("shopwareServicesService"),{permissions:i}=await s.getCategorizedPermissions(this.service.name);this.categorizedPermissions=i}this.showPermissionsModal=!0}catch(s){Shopware.Store.get("notification").createNotification({variant:"critical",message:t(s)})}finally{e()}}}}),B=Shopware.Component.wrapComponentConfig({name:"sw-settings-services-index",template:f,inject:["acl"],components:{SwSettingsServicesHero:k,SwSettingsServicesGrantPermissionsCard:x,SwSettingsServicesRevokePermissionsModal:M,SwSettingsServicesDeactivateModal:z,SwSettingsServicesServiceCard:P},data(){return{grantPermissionsCardBackground:Shopware.Filter.getByName("asset")("/administration/administration/static/img/services/grant-permissions-background.svg"),services:[],suspended:!0,loadingError:""}},computed:{...g(r,["config","currentRevision","consentGiven"])},created(){const e=Shopware.Service("shopwareServicesService"),s=Shopware.Service("serviceRegistryClient"),i=r(),d=w();Promise.all([this.reloadServices(),e.getServicesContext().then(a=>{i.config=a}),s.getCurrentRevision(d.currentLocale.value??"en-GB").then(a=>{i.revisions=a})]).then(()=>{this.suspended=!1}).catch(a=>{const m=t(a);Shopware.Store.get("notification").createNotification({variant:"critical",title:this.$t("global.default.error"),message:m})})},methods:{async activateServices(){try{const e=Shopware.Service("shopwareServicesService"),s=r();s.config=await e.enableAllServices(),Shopware.Store.get("notification").createNotification({title:this.$t("sw-settings-services.index.services-enabled"),variant:"positive",message:this.$t("sw-settings-services.index.services-scheduled")})}catch(e){Shopware.Store.get("notification").createNotification({title:this.$t("global.default.error"),variant:"critical",message:t(e),autoClose:!1})}},async reloadServices(){try{const e=Shopware.Service("shopwareServicesService");this.services=await e.getInstalledServices()}catch(e){this.loadingError=t(e),Shopware.Store.get("notification").createNotification({variant:"critical",title:this.$t("global.default.error"),message:this.$t("sw-settings-services.exception.service-list"),autoClose:!1}),this.services=[]}}}});export{B as default};
