const i=`{% block sw_settings_media_index %} <sw-page class="sw-settings-media"> {% block sw_settings_media_header %} <template #smart-bar-header> <h2>{{ $tc('sw-settings.index.title') }} <mt-icon name="regular-chevron-right-xs" size="12px" /> {{ $tc('sw-settings-media.general.title') }} </h2> </template> {% endblock %} {% block sw_settings_media_smart_bar_actions %} <template #smart-bar-actions> {% block sw_settings_media_actions_save %} <sw-button-process class="sw-settings-media__save-action" :is-loading="isLoading" :process-success="isSaveSuccessful" :disabled="isLoading" variant="primary" @update:process-success="saveFinish" @click="onSave" > {{ $tc('sw-settings-media.general.buttonSave') }} </sw-button-process> {% endblock %} </template> {% endblock %} {% block sw_settings_media_content %} <template #content> <sw-card-view> <template v-if="isLoading"> <sw-skeleton /> <sw-skeleton /> </template> <sw-system-config v-show="!isLoading" ref="systemConfig" domain="core.media" @loading-changed="onLoadingChanged" > <template #card-element-last> <mt-slider v-if="!isLoading" v-model="sliderValue" :label="$tc('sw-settings-media.3d.lightIntensity.label')" :help-text="$tc('sw-settings-media.3d.lightIntensity.helpText')" :min="0" :max="100" /> </template> </sw-system-config> </sw-card-view> </template> {% endblock %} </sw-page> {% endblock %}`,{Mixin:a}=Shopware,n={template:i,inject:["systemConfigApiService"],mixins:[a.getByName("notification")],data(){return{isLoading:!1,isSaveSuccessful:!1,sliderValue:0}},metaInfo(){return{title:this.$createTitle()}},created(){this.createdComponent()},methods:{async createdComponent(){var s,t;this.isLoading=!0;try{const e=await this.systemConfigApiService.getValues("core.media");this.sliderValue=e["core.media.defaultLightIntensity"]!==void 0?e["core.media.defaultLightIntensity"]:100}catch(e){(t=(s=e==null?void 0:e.response)==null?void 0:s.data)!=null&&t.errors&&this.createErrorNotification(e.response.data.errors)}finally{this.isLoading=!1}},saveFinish(){this.isSaveSuccessful=!1},onSave(){this.isSaveSuccessful=!1,this.isLoading=!0,this.$refs.systemConfig.saveAll().then(async()=>{this.isLoading=!1,this.isSaveSuccessful=!0,await this.systemConfigApiService.batchSave({null:{"core.media.defaultLightIntensity":this.sliderValue}})}).catch(s=>{this.isLoading=!1,this.createNotificationError({message:s})})},onLoadingChanged(s){this.isLoading=s}}};export{n as default};
