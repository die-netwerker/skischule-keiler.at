const l=`{% block sw_condition_value_content %} <div class="sw-condition-customer-custom-field sw-condition__condition-value"> {% block sw_condition_customer_custom_field_field %} <sw-entity-single-select ref="selectedField" v-model:value="selectedField" entity="custom_field" :criteria="customFieldCriteria" :placeholder="$tc('global.sw-condition.condition.lineItemCustomField.field.customFieldSelect.placeholder')" :disabled="disabled || undefined" size="medium" show-clearable-button @update:value="onFieldChange" > <template #selection-label-property="slotProps"> {{ getInlineSnippet(slotProps.item.config.label) || slotProps.item.name }} </template> <template #result-label-property="slotProps"> {{ getInlineSnippet(slotProps.item.config.label) || slotProps.item.name }} </template> <template #result-description-property="slotProps"> {% block sw_condition_customer_custom_field_field_description %} <span v-if="getFieldDescription(slotProps.item).length > 20" :title="getFieldDescription(slotProps.item)" > {{ truncateFilter(getFieldDescription(slotProps.item), 20) }} </span> <template v-else> {{ getFieldDescription(slotProps.item) }} </template> {% endblock %} </template> </sw-entity-single-select> {% endblock %} {% block sw_condition_customer_custom_field_operator %} <sw-condition-operator-select v-if="renderedField" v-bind="{ operators, condition }" :disabled="disabled || undefined" /> {% endblock %} {% block sw_condition_customer_custom_field_value %} <sw-form-field-renderer v-if="renderedField" size="medium" :value="renderedFieldValue" :config="conditionDataProviderService.getTransformedCustomFieldConditionConfig(renderedField.config)" :disabled="disabled || undefined" @update:value="renderedFieldValue = $event" /> {% endblock %} </div> {% endblock %}`,{Component:o,Filter:n,Mixin:d}=Shopware,{mapPropertyErrors:s}=o.getComponentHelper(),{Criteria:t}=Shopware.Data,r={template:l,inject:["feature"],mixins:[d.getByName("sw-inline-snippet")],computed:{customFieldCriteria(){return new t(1,25).addAssociation("customFieldSet").addFilter(t.equals("customFieldSet.relations.entityName","customer")).addSorting(t.sort("customFieldSet.name","ASC"))},operator:{get(){return this.ensureValueExist(),this.condition.value.operator},set(e){this.ensureValueExist(),this.condition.value={...this.condition.value,operator:e}}},renderedField:{get(){return this.ensureValueExist(),this.condition.value.renderedField},set(e){this.ensureValueExist(),this.condition.value={...this.condition.value,renderedField:e}}},selectedField:{get(){return this.ensureValueExist(),this.condition.value.selectedField},set(e){this.ensureValueExist(),this.condition.value={...this.condition.value,selectedField:e}}},selectedFieldSet:{get(){return this.ensureValueExist(),this.condition.value.selectedFieldSet},set(e){this.ensureValueExist(),this.condition.value={...this.condition.value,selectedFieldSet:e}}},renderedFieldValue:{get(){return this.ensureValueExist(),this.condition.value.renderedFieldValue},set(e){this.ensureValueExist(),this.condition.value={...this.condition.value,renderedFieldValue:e}}},operators(){return this.conditionDataProviderService.getOperatorSetByComponent(this.renderedField)},currentError(){return this.conditionValueRenderedFieldError||this.conditionValueSelectedFieldError||this.conditionValueSelectedFieldSetError||this.conditionValueOperatorError||this.conditionValueRenderedFieldValueError},truncateFilter(){return n.getByName("truncate")},...s("condition",["value.renderedField","value.selectedField","value.selectedFieldSet","value.operator","value.renderedFieldValue"])},methods:{getFieldDescription(e){return this.getInlineSnippet(e.customFieldSet.config.label)||e.customFieldSet.name},onFieldChange(e){var i;if(!((i=this.$refs.selectedField.resultCollection)!=null&&i.has(e))){this.operator=null,this.renderedFieldValue=null,this.renderedField=null,this.selectedFieldSet=null;return}this.operator=null,this.renderedFieldValue=null,this.renderedField=this.$refs.selectedField.resultCollection.get(e),this.selectedFieldSet=this.renderedField.customFieldSetId}}};export{r as default};
