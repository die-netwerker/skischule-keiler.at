const m=`{% block sw_settings_country_new_snippet_modal %} <sw-modal class="sw-settings-country-new-snippet-modal" :title="$tc('sw-settings-country.detail.newSnippetModalTitle')" @modal-close="onCloseModal" > <sw-contextual-field class="sw-settings-country-new-snippet-modal__search-field" required :disabled="disabled" :error="null" > <template #sw-field-input="{ identification, disabled, error, size, setFocusClass, removeFocusClass }"> <input ref="searchInput" v-model="searchTerm" type="text" class="sw-settings-country-new-snippet-modal__input-field" :placeholder="$tc('sw-settings-country.detail.placeholderSearchSnippet')" :disabled="disabled" @input="debouncedSearch" > <sw-loader v-if="isLoading" class="sw-settings-country-new-snippet-modal__loader" size="16px" /> <mt-icon class="sw-settings-country-new-snippet-modal__search-icon" name="regular-search-s" size="16px" /> </template> </sw-contextual-field> <sw-tree :sortable="false" :items="searchResults" :searchable="false" :disable-context-menu="true" bind-items-to-folder :active-tree-item-id="activeFocusId" initially-expanded-root route-params-active-element-id="snippet" > <template #headline> <span></span> </template> <template #search> <span></span> </template> <template #items="{ treeItems, sortable, disableContextMenu, onChangeRoute, newElementId, checkItem, checkedItemIds, selectedItemsPathIds, }" > <sw-tree-item v-for="item in treeItems" :key="item.id" should-focus :display-checkbox="false" :item="item" :active="item.active" :sortable="sortable" :on-change-route="onChangeRoute" :active-parent-ids="selectedItemsPathIds" :active-item-ids="checkedItemIds" @check-item="checkItem" > <template #actions="{ item }"> <mt-button v-if="item.childCount === 0" variant="secondary" @click="addElement(item.data)" > {{ $tc('sw-settings-country.detail.buttonInsertSnippet') }} </mt-button> </template> </sw-tree-item> </template> </sw-tree> <sw-select-base class="sw-multi-snippet-select" :is-loading="isLoading" :error="null" v-bind="$attrs" > <template #sw-select-selection="{ identification, error, disabled, size, expand, collapse }"> <ul ref="selectionList" class="sw-select-selection-list" > <li v-for="(snippet, index) in selection" :key="index" class="sw-select-selection-list__item-holder" :class="'sw-select-selection-list__item-holder--' + index" :data-id="snippet" > <slot name="selected-option" v-bind="{ snippet, defaultLabel: snippet, disabled }" > <sw-label :dismissable="true" :size="size" @dismiss="onClickDismiss(index)" > <span class="sw-select-selection-list__item"> <slot name="label-property" v-bind="{ item: snippet, index }" > {{ getLabelProperty(snippet) }} </slot> </span> </sw-label> </slot> </li> <li> <slot name="input"> <input class="sw-select-selection-list__input" type="text" :disabled="disabled || undefined" > </slot> </li> </ul> </template> </sw-select-base> <template #modal-footer> <mt-button variant="primary" @click="onCloseModal" > {{ $tc('global.default.apply') }} </mt-button> </template> </sw-modal> {% endblock %}`,{Component:u}=Shopware,h=Shopware.Utils,b=u.wrapComponentConfig({template:m,props:{selections:{type:Array,required:!1,default:()=>[]},currentPosition:{type:Number,required:!0},addressFormat:{type:Array,required:!0},disabled:{type:Boolean,required:!1,default:!1},getLabelProperty:{type:Function,required:!1,default:e=>e}},data(){return{searchTerm:"",isLoading:!1,searchResults:null,activeFocusId:null}},computed:{selection(){return this.addressFormat[this.currentPosition]}},watch:{activeFocusId:{immediate:!0,handler(e){this.$route.params.snippet=e}}},created(){this.createdComponent()},methods:{createdComponent(){this.getSnippetsTree(this.selections)},onCloseModal(){this.$emit("modal-close")},addElement(e){this.addressFormat[this.currentPosition].push(e.id.replace(".","/")),this.$emit("change",this.currentPosition,this.addressFormat[this.currentPosition])},debouncedSearch:h.debounce(function(){if(!this.searchTerm){this.getSnippetsTree(this.selections);return}this.search()},750),search(){this.activeFocusId=null;const e=this.searchTerm.split(/[\W_]+/gi);if(!e)return;const r=this.selections.filter(o=>e.every(d=>o.name.toLowerCase().includes(d.toLowerCase())));r.length!==0&&(this.activeFocusId=r[0].id,this.getSnippetsTree(r))},getSnippetsTree(e){const r={},o=(l,n,a)=>{var p;const{keyWords:t,name:s}=n,i=t[l],c=t[l+1];a[i]=a[i]||{id:i,name:s,parentId:null,children:{}},c&&(a[i].children[c]=((p=a[i])==null?void 0:p.children[c])||{id:`${a[i].id}.${c}`,name:s,parentId:a[i].id,children:{}},o(l+1,{keyWords:t,name:s},a[i].children))},d=(l,n=[])=>{const a=({parentId:t=null,id:s,children:i,name:c})=>{const[p]=t?s.split(".").reverse():[s];return Object.values(i).length?p.replace(/_|-/g," "):c};return l.forEach(t=>{const s=t.children?Object.values(t.children):[];n.push({id:t.id,name:a(t),childCount:s.length,parentId:t.parentId,children:{}}),s.length>0&&(n=d(s,n))}),n};e.forEach(l=>{const n=l.id.split("/");n.length!==0&&o(0,{keyWords:n,...l},r)}),this.searchResults=d(Object.values(r))},onClickDismiss(e){this.$emit("change",this.currentPosition,this.addressFormat[this.currentPosition].filter((r,o)=>o!==e))}}});export{b as default};
