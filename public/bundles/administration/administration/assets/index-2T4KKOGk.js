import{A as i}from"./api.service-Dyd0zpin.js";import"./channel-D6fkBpuJ.js";const l=`{% block sw_customer_imitate_customer_modal %} <sw-modal :title="modalTitle" class="sw-customer-imitate-customer-modal" @modal-close="onCancel" > {% block sw_customer_imitate_customer_modal_alert %} <mt-banner v-if="hasSalesChannelDomains" > <i18n-t keypath="sw-customer.imitateCustomerModal.modalInfo" tag="p" scope="local" > <template #logout> <b>{{ $tc('sw-customer.imitateCustomerModal.modalInfoLogout') }}</b> </template> </i18n-t> </mt-banner> <mt-banner v-else variant="attention" > {{ $tc('sw-customer.imitateCustomerModal.modalInfoNoDomains') }} </mt-banner> {% endblock %} {% block sw_customer_imitate_customer_modal_description %} <div v-if="hasSalesChannelDomains" class="imitate-customer-modal-description" > {{ modalDescription }} </div> {% endblock %} {% block sw_customer_imitate_customer_modal_body %} <sw-container v-if="hasSalesChannelDomains" class="imitate-customer-modal-container" columns="1fr" gap="8px 0px" > {% block sw_customer_imitate_customer_modal_sales_channel_domain_items %} <sw-context-menu-item v-for="salesChannelDomain of salesChannelDomains" :key="salesChannelDomain.id" target="_blank" @click="onSalesChannelDomainMenuItemClick(salesChannelDomain.salesChannelId, salesChannelDomain.url)" > <div class="imitate-customer-modal-item-content" columns="1fr 1fr" gap="10px 0px" > <div class="imitate-customer-modal-item-header"> {{ salesChannelDomain.salesChannel.translated.name }} </div> <div class="imitate-customer-modal-item-url"> {{ salesChannelDomain.url }} </div> <mt-icon name="regular-external-link-s" size="16px" /> </div> </sw-context-menu-item> {% endblock %} </sw-container> {% endblock %} {% block sw_customer_imitate_customer_modal_footer %} <template #modal-footer> <div> {% block sw_customer_imitate_customer_modal_footer_cancel %} <mt-button size="small" variant="secondary" @click="onCancel" > {{ $tc('sw-customer.imitateCustomerModal.labelCancel') }} </mt-button> {% endblock %} </div> </template> {% endblock %} </sw-modal> {% endblock %}`,{Mixin:m}=Shopware,{Criteria:t}=Shopware.Data,d={template:l,inject:["repositoryFactory","contextStoreService"],emits:["modal-close"],mixins:[m.getByName("notification")],props:{customer:{type:Object,required:!0}},data(){return{salesChannelDomains:[]}},computed:{modalTitle(){return this.$tc("sw-customer.imitateCustomerModal.modalTitle",{firstname:this.customer.firstName,lastname:this.customer.lastName})},modalDescription(){return this.$tc("sw-customer.imitateCustomerModal.modalDescription",{firstname:this.customer.firstName,lastname:this.customer.lastName})},salesChannelDomainRepository(){return this.repositoryFactory.create("sales_channel_domain")},currentUser(){return Shopware.Store.get("session").currentUser},salesChannelDomainCriteria(){const e=new t;return e.addAssociation("salesChannel"),e.addFilter(t.equals("salesChannel.typeId",Shopware.Defaults.storefrontSalesChannelTypeId)),e.addFilter(t.equals("salesChannel.active",!0)),e.addSorting(t.sort("salesChannel.name","ASC")),e.addSorting(t.sort("languageId","DESC")),this.customer.boundSalesChannelId&&e.addFilter(t.equals("salesChannelId",this.customer.boundSalesChannelId)),e},hasSalesChannelDomains(){return this.salesChannelDomains!==null&&this.salesChannelDomains.length>0}},created(){this.createdComponent()},methods:{async createdComponent(){this.fetchSalesChannelDomains()},async onSalesChannelDomainMenuItemClick(e,s){this.contextStoreService.generateImitateCustomerToken(this.customer.id,e).then(o=>{var a;const n=i.handleResponse(o);this.contextStoreService.redirectToSalesChannelUrl(s,n.token,this.customer.id,(a=this.currentUser)==null?void 0:a.id)}).catch(()=>{this.createNotificationError({message:this.$tc("sw-customer.detail.notificationImitateCustomerErrorMessage")})})},onCancel(){this.$emit("modal-close")},fetchSalesChannelDomains(){this.salesChannelDomainRepository.search(this.salesChannelDomainCriteria,Shopware.Context.api).then(e=>{this.salesChannelDomains=e})}}};export{d as default};
