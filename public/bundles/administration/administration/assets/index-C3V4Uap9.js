const n='{% block sw_condition_all_line_items_container %} <div class="condition-all-line-items-container" :class="containerRowClass" > <template v-for="(child, index) in condition[childAssociationField]" :key="`condition-all-line-items-child--${index}`" > <sw-condition-tree-node :parent-condition="condition" :condition="child" :disabled="disabled || undefined" :level="level + 1" :insert-before="onInsertBefore" :insert-after="onInsertAfter" /> </template> </div> {% endblock %}',{Component:o,Mixin:s}=Shopware,{EntityCollection:r}=Shopware.Data,d={template:n,provide(){return{unwrapAllLineItemsCondition:this.unwrapCondition}},emits:["create-before","create-after"],mixins:[s.getByName("ruleContainer")],computed:{children(){return this.condition.children},childType(){return this.children.first()?this.children.first().type:null},childrenLength(){return this.condition.children.length}},watch:{childType(i){if(!i)return;const e=this.conditionDataProviderService.getByType(i),t=o.getComponentRegistry().get(e.component);t&&t.extends!=="sw-condition-base-line-item"&&this.unwrapCondition(this.children.first()),this.setConditionValue()},childrenLength(i){i===0&&this.removeNodeFromTree(this.parentCondition,this.condition)}},created(){this.createdComponent()},methods:{createdComponent(){this.setConditionValue()},setConditionValue(){if(this.condition.value=[],this.children.first().type==="promotionLineItem"){this.condition.value={types:["promotion"]};return}this.children.first().type!=="cartLineItemOfType"&&(this.condition.value={types:["product","custom"]})},onAddPlaceholder(){},unwrapCondition(i){this.removeNodeFromTree(this.parentCondition,this.condition),this.insertNodeIntoTree(this.parentCondition,this.createCondition({type:i.type,value:i.value,[this.childAssociationField]:new r(this.condition[this.childAssociationField].source,this.condition[this.childAssociationField].entity,this.condition[this.childAssociationField].context,null,[])},this.parentCondition.id,this.condition.position))},onInsertBefore(){this.$emit("create-before")},onInsertAfter(){this.$emit("create-after")}}};export{d as default};
