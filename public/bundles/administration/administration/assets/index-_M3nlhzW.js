const r=`{% block sw_pagination %} <div v-if="shouldBeVisible" class="sw-pagination" > {% block sw_pagination_page_prev %} <button :disabled="currentPage === 1" :aria-label="$tc('global.sw-pagination.previousPage')" class="sw-pagination__page-button sw-pagination__page-button-prev" @click="prevPage" > <mt-icon name="regular-chevron-left-xs" /> </button> {% endblock %} {% block sw_pagination_page_list %} <ul class="sw-pagination__list"> {% block sw_pagination_page_list_item %} <li v-for="(pageNum, index) in displayedPages" :key="index" class="sw-pagination__list-item" > {% block sw_pagination_page_list_item_button %} <button v-if="typeof(pageNum) === 'number'" :aria-label="$tc('global.sw-pagination.page', { page: pageNum })" class="sw-pagination__list-button" :class="{ 'is-active': currentPage === pageNum }" @click="changePageByPageNumber(pageNum)" > {{ pageNum }} </button> {% endblock %} {% block sw_pagination_page_list_item_separator %} <span v-else class="sw-pagination__list-separator" > {{ pageNum }} </span> {% endblock %} </li> {% endblock %} </ul> {% endblock %} {% block sw_pagination_page_next %} <button :disabled="currentPage === maxPage" :aria-label="$tc('global.sw-pagination.nextPage')" class="sw-pagination__page-button sw-pagination__page-button-next" @click="nextPage" > <mt-icon name="regular-chevron-right-xs" size="16px" /> </button> {% endblock %} {% block sw_pagination_per_page_selection %} <div v-if="steps.length > 1" class="sw-pagination__per-page" > <mt-select size="small" name="perPage" :label="$tc('global.sw-pagination.labelItemsPerPage')" :model-value="String(perPage)" :options="possibleStepsOptions" hide-clearable-button @update:model-value="onPageSizeChange" /> </div> {% endblock %} </div> {% endblock %}`,l={template:r,emits:["page-change"],props:{total:{type:Number,required:!0},limit:{type:Number,required:!0},page:{type:Number,required:!0},totalVisible:{type:Number,required:!1,default:7},steps:{type:Array,required:!1,default(){return[10,25,50,75,100]}},autoHide:{type:Boolean,required:!1,default:!0}},data(){return{currentPage:this.page,perPage:this.limit}},computed:{maxPage(){return Math.ceil(this.total/this.perPage)},displayedPages(){const e=this.totalVisible,a=this.currentPage;if(this.maxPage<=e)return this.range(1,this.maxPage);const s=e%2===0?1:0,t=Math.floor(e/2),i=this.maxPage-t+1+s;if(a===t||t===1&&a===t+1)return[...this.range(1,t+1),"...",...this.range(i,this.maxPage)];if(a===i||i===this.maxPage&&a===this.maxPage-1)return[...this.range(1,t),"...",...this.range(i-1,this.maxPage)];if(a>t&&a<i){const n=a-t+2,g=a+t-2-s;return[1,"...",...n>g?[a]:this.range(n,g),"...",this.maxPage]}return[...this.range(1,t),"...",...this.range(i,this.maxPage)]},shouldBeVisible(){return this.autoHide?this.total>Math.min(...this.steps):!0},possibleSteps(){const e=this.total,a=[...this.steps].sort((i,n)=>i-n);let s;return a.filter(i=>s>e?!1:(s=i,!0))},possibleStepsOptions(){return this.possibleSteps.map(e=>({value:String(e),label:String(e)}))}},watch:{page(){this.currentPage=this.page},limit(){this.perPage=this.limit},maxPage(){if(this.maxPage===0){this.currentPage=1;return}this.currentPage>this.maxPage&&this.changePageByPageNumber(this.maxPage)}},methods:{range(e,a){const s=[];e=e>0?e:1;for(let t=e;t<=a;t+=1)s.push(t);return s},pageChange(){this.$emit("page-change",{page:this.currentPage,limit:this.perPage})},onPageSizeChange(e){this.perPage=Number(e),this.firstPage()},firstPage(){this.currentPage=1,this.pageChange()},prevPage(){this.currentPage-=1,this.pageChange()},nextPage(){this.currentPage+=1,this.pageChange()},lastPage(){this.currentPage=this.maxPage,this.pageChange()},changePageByPageNumber(e){this.currentPage=e,this.pageChange()},refresh(){this.pageChange()}}};export{l as default};
