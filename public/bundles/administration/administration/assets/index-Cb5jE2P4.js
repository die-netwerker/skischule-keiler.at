const s=`{% block sw_multi_snippet_drag_and_drop %} <div class="sw-multi-snippet-drag-and-drop"> <mt-icon class="sw-multi-snippet-drag-and-drop__action" name="regular-grip-vertical" size="12" /> <sw-select-base class="sw-multi-snippet-select" :is-loading="isLoading" :error="errorObject" v-bind="$attrs" > <template #sw-select-selection="{ identification, error, disabled, size, expand, collapse }"> <ul ref="selectionList" class="sw-select-selection-list" > <li v-for="(snippet, index) in value" :key="index" class="sw-select-selection-list__item-holder" :class="'sw-select-selection-list__item-holder--' + index" :data-id="snippet" > <slot name="selected-option" v-bind="{ snippet, defaultLabel: snippet, disabled, linePosition }" > <sw-label v-droppable="{ ...mergedDropConfig, data: { snippet, index, linePosition }}" v-draggable="{ ...mergedDragConfig, data: { snippet, index, linePosition }}" :dismissable="!isSelectionDisabled(snippet)" :size="size" @dismiss="onClickDismiss(index)" > <span class="sw-select-selection-list__item"> <slot name="label-property" v-bind="{ item: snippet, index, getLabelProperty }" > {{ getLabelProperty(snippet) }} </slot> </span> </sw-label> </slot> </li> <li> <slot name="input"> <input class="sw-select-selection-list__input" type="text" :disabled="disabled" > </slot> </li> </ul> </template> </sw-select-base> <sw-context-button class="sw-multi-snippet-drag-and-drop__context-button"> <sw-context-menu-item :disabled="isMaxLines" @click="openModal" > {{ $tc('sw-settings-country.general.actions.newSnippet') }} </sw-context-menu-item> <sw-context-menu-item :disabled="isMaxLines" @click="addNewLineAt('above')" > {{ $tc('sw-settings-country.general.actions.createBefore') }} </sw-context-menu-item> <sw-context-menu-item :disabled="isMaxLines" @click="addNewLineAt('below')" > {{ $tc('sw-settings-country.general.actions.createAfter') }} </sw-context-menu-item> <sw-context-menu-item :disabled="isMinLines" @click="moveToNewPosition(0)" > {{ $tc('sw-settings-country.general.actions.moveTop') }} </sw-context-menu-item> <sw-context-menu-item :disabled="isMinLines" @click="moveToNewPosition" > {{ $tc('sw-settings-country.general.actions.moveBottom') }} </sw-context-menu-item> <sw-context-menu-item variant="danger" :disabled="isMinLines" @click="onDelete" > {{ $tc('global.default.delete') }} </sw-context-menu-item> </sw-context-button> </div> {% endblock %}`,{Component:n}=Shopware,l=1,o=10,a=n.wrapComponentConfig({template:s,inject:["feature"],props:{value:{type:Array,required:!0},totalLines:{type:Number,required:!0},linePosition:{type:Number,required:!0},isLoading:{type:Boolean,required:!1,default:!1},disabled:{type:Boolean,required:!1,default:!1},selectionDisablingMethod:{type:Function,required:!1,default:()=>!1},dragConfig:{type:Object,required:!1,default(e){return{delay:200,dragGroup:"sw-multi-snippet",validDragCls:"is--valid-drag",preventEvent:!0,disabled:e.disabled}}},dropConfig:{type:Object,required:!1,default(e){return{delay:200,dragGroup:"sw-multi-snippet",validDragCls:"is--valid-drag",preventEvent:!0,disabled:e.disabled}}},getLabelProperty:{type:Function,required:!1,default:e=>e}},data(){return{defaultConfig:{delay:200,dragGroup:"sw-multi-snippet",validDragCls:"is--valid-drag",preventEvent:!0,disabled:this.disabled}}},computed:{errorObject(){return null},mergedDragConfig(){return{...this.defaultConfig,onDragStart:this.onDragStart,onDragEnter:this.onDragEnter,onDrop:this.onDrop,...this.dragConfig}},mergedDropConfig(){return{...this.defaultConfig,...this.dropConfig}},isMaxLines(){return this.totalLines>=o},isMinLines(){return this.totalLines<=l}},methods:{onDragStart(e,t,i){this.$emit("drag-start",{config:e,element:t,dragElement:i})},onDragEnter(e,t){!e||!t||this.$emit("drag-enter",{dragData:e,dropData:t})},onDrop(e,t){if(!(!e||!t)){if(e.linePosition===t.linePosition){const i=Object.assign([],this.value,{[e.index]:this.value[t.index],[t.index]:this.value[e.index]});this.$emit("update:value",this.linePosition,i);return}this.$emit("drop-end",this.linePosition,{dragData:e,dropData:t})}},isSelectionDisabled(e){return this.disabled?!0:this.selectionDisablingMethod(e)},onClickDismiss(e){this.$emit("update:value",this.linePosition,this.value.filter((t,i)=>i!==e))},addNewLineAt(e){this.$emit("add-new-line",this.linePosition,e)},moveToNewPosition(e=null){this.$emit("position-move",this.linePosition,e)},onDelete(){this.$emit("update:value",this.linePosition)},openModal(){this.$emit("open-snippet-modal",this.linePosition)}}});export{a as default};
