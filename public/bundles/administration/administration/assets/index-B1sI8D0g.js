const a=`{% block sw_sales_channel_detail_content_tabs %}{% endblock %} {% block sw_sales_channel_detail_language_switch %} <template #language-switch> <sw-language-switch disabled /> </template> {% endblock %} {% block sw_sales_channel_detail_content_language_info %} <sw-language-info :entity-description="placeholder(salesChannel, 'name', $tc('sw-sales-channel.detail.textHeadline'))" is-new-entity /> {% endblock %}`,n=Shopware.Utils,t=(e,i,s)=>{e.name.includes("sw.sales.channel.create")&&!e.params.id&&(e.params.id=n.createId()),s()},l={template:a,beforeRouteEnter:t,beforeRouteUpdate:t,inject:["systemConfigApiService"],computed:{allowSaving(){return this.acl.can("sales_channel.creator")}},methods:{createdComponent(){this.$route.params.typeId&&(Shopware.Store.get("context").isSystemDefaultLanguage||Shopware.Store.get("context").resetLanguageToDefault(),this.salesChannel=this.salesChannelRepository.create(),this.salesChannel.typeId=this.$route.params.typeId,this.salesChannel.active=!1,this.setMeasurementUnits().catch(()=>{this.createNotificationError({message:this.$tc("sw-sales-channel.detail.messageMeasurementUnitsSetError")})}).finally(()=>{this.$super("createdComponent")}))},async setMeasurementUnits(){const e=await this.getMeasurementUnits();this.salesChannel.measurementUnits={system:e["core.measurementUnits.system"],units:{length:e["core.measurementUnits.length"],weight:e["core.measurementUnits.weight"]}}},saveFinish(){this.isSaveSuccessful=!1,this.$router.push({name:"sw.sales.channel.detail",params:{id:this.salesChannel.id}})},onSave(){this.$super("onSave")},getMeasurementUnits(){return this.systemConfigApiService.getValues("core.measurementUnits")}}};export{l as default};
