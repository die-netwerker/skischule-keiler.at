const r='{% block sw_existence_filter %} <div class="sw-existence-filter"> <sw-base-filter :title="filter.label" :show-reset-button="!!value" :active="active" @filter-reset="resetFilter" > {% block sw_existence_filter_content %} <mt-select :model-value="value" :placeholder="filter.placeholder" :options="filterOptions" @update:model-value="changeValue" /> {% endblock %} </sw-base-filter> </div> {% endblock %}',{Criteria:i}=Shopware.Data,s={template:r,emits:["filter-update","filter-reset"],props:{filter:{type:Object,required:!0},active:{type:Boolean,required:!0}},computed:{value(){return this.filter.value},filterOptions(){return[{value:"true",label:String(this.filter.optionHasCriteria)},{value:"false",label:String(this.filter.optionNoCriteria)}]}},methods:{changeValue(e){if(!e){this.resetFilter();return}const l=this.filter.property.concat(this.filter.schema?`.${this.filter.schema.localField}`:"");let t=[i.equals(l,null)];e==="true"&&(t=[i.not("AND",t)]),this.$emit("filter-update",this.filter.name,t,e)},resetFilter(){this.$emit("filter-reset",this.filter.name)}}};export{s as default};
