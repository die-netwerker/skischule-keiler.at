const a=`{% block sw_first_run_wizard_shopware_domain %} <div class="sw-first-run-wizard-shopware-domain"> <h3 class="headline"> {{ $tc('sw-first-run-wizard.shopwareDomain.headline') }} </h3> <p class="message" v-html="$tc('sw-first-run-wizard.shopwareDomain.message')" ></p> <mt-switch v-model="createShopDomain" :label="$tc('sw-first-run-wizard.shopwareDomain.labelCreateDomain')" /> <div v-if="createShopDomain"> <mt-text-field v-model="newShopDomain" name="newShopDomain" validation="required" :label="'Shop domain'" /> <mt-checkbox v-model:checked="testEnvironment" :label="$tc('sw-first-run-wizard.shopwareDomain.testEnvironment')" /> </div> <div v-else-if="licenceDomains.length > 0"> <mt-select v-model="selectedShopDomain" label="Shop domain" :options="domainOptions" /> </div> <div v-if="domainError" class="sw-first-run-wizard-shopware-domain__error" > <mt-banner :title="domainError.title" variant="critical" > {{ domainError.detail }} </mt-banner> </div> <sw-loader v-if="isLoading" /> </div> {% endblock %}`,r={template:a,inject:["firstRunWizardService"],emits:["frw-set-title","buttons-update","frw-redirect"],data(){return{licenceDomains:[],selectedShopDomain:"",createShopDomain:!1,newShopDomain:"",testEnvironment:!1,domainError:null,isLoading:!1}},computed:{domainToVerify(){return this.createShopDomain?this.newShopDomain:this.selectedShopDomain},isDomainEmpty(){return this.domainToVerify.length<=0},nextAction(){var i;return(i=Shopware.Store.get("context").app.config.settings)!=null&&i.disableExtensionManagement?"sw.first.run.wizard.index.finish":"sw.first.run.wizard.index.store"},domainOptions(){return this.licenceDomains.map(i=>({id:i.domain,value:i.domain,label:i.domain}))}},watch:{isDomainEmpty(){this.updateButtons()}},created(){this.createdComponent()},methods:{createdComponent(){this.isLoading=!0,this.updateButtons(),this.setTitle(),this.firstRunWizardService.getLicenseDomains().then(i=>{const{items:t}=i;!t||t.length<1||(this.licenceDomains=t,this.selectedShopDomain=t[0].domain)}).finally(()=>{this.licenceDomains.length<=0&&(this.createShopDomain=!0),this.isLoading=!1})},setTitle(){this.$emit("frw-set-title",this.$tc("sw-first-run-wizard.shopwareAccount.modalTitle"))},updateButtons(){const i=[{key:"back",label:this.$tc("sw-first-run-wizard.general.buttonBack"),position:"left",variant:"secondary",action:"sw.first.run.wizard.index.shopware.account",disabled:!1},{key:"next",label:this.$tc("sw-first-run-wizard.general.buttonNext"),position:"right",variant:"primary",action:this.verifyDomain.bind(this),disabled:this.isDomainEmpty}];this.$emit("buttons-update",i)},verifyDomain(){const{testEnvironment:i}=this,t=this.domainToVerify;return this.domainError=null,this.firstRunWizardService.verifyLicenseDomain({domain:t,testEnvironment:i}).then(()=>(this.$emit("frw-redirect",this.nextAction),!1)).catch(e=>{const n=e.response.data.errors.pop();return this.domainError=n,!0})}}};export{r as default};
