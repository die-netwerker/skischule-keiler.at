import{UploadEvents as o}from"./media.api.service-C-t3fDmK.js";import"./util.service-Y0r3dATM.js";import"./channel-D6fkBpuJ.js";import"./_baseUniq-DwRlPR15.js";import"./_baseIteratee-Dn-eCNgF.js";import"./camelCase-AQftrnVC.js";import"./string.utils-BjgJ7cn9.js";import"./file-reader.utils-X6d2K5Hs.js";import"./api.service-Dyd0zpin.js";const{Mixin:n,Context:r}=Shopware,c=Shopware.Utils;function u(e){return e.response.data.errors.some(t=>t.code==="CONTENT__MEDIA_ILLEGAL_FILE_NAME")}function a(e){return e.response.data.errors.some(t=>t.code==="CONTENT__MEDIA_DUPLICATED_FILE_NAME")}function m(e){return e.response.data.errors.some(t=>t.code==="CONTENT__MEDIA_ILLEGAL_URL")}const L={template:'<div style="display: none"></div>',inject:["repositoryFactory","mediaService"],mixins:[n.getByName("notification")],props:{uploadTag:{type:String,required:!0},autoUpload:{type:Boolean,required:!1,default:!1}},data(){return{id:c.createId(),notificationId:null}},computed:{mediaRepository(){return this.repositoryFactory.create("media")}},watch:{uploadTag(e,t){this.mediaService.removeListener(t,this.convertStoreEventToVueEvent),this.mediaService.addListener(e,this.convertStoreEventToVueEvent)}},created(){this.createdComponent()},unmounted(){this.destroyedComponent()},methods:{createdComponent(){this.mediaService.addListener(this.uploadTag,this.convertStoreEventToVueEvent)},destroyedComponent(){this.mediaService.removeListener(this.uploadTag,this.convertStoreEventToVueEvent)},convertStoreEventToVueEvent({action:e,uploadTag:t,payload:i}){if(this.uploadTag===t){if(e===o.UPLOAD_ADDED){if(this.autoUpload===!0){this.syncEntitiesAndRunUploads();return}this.$emit(o.UPLOAD_ADDED,i);return}if(e===o.UPLOAD_FINISHED){this.updateSuccessNotification(t,i),this.$emit(o.UPLOAD_FINISHED,i);return}if(e===o.UPLOAD_FAILED){if(i.successAmount+i.failureAmount===i.totalAmount&&i.totalAmount!==i.failureAmount&&this.updateSuccessNotification(t,i),a(i.error)){this.$emit(o.UPLOAD_FAILED,i);return}this.handleError(i).then(()=>{this.$emit(o.UPLOAD_FAILED,i)})}e===o.UPLOAD_CANCELED&&this.$emit(o.UPLOAD_CANCELED,i)}},async handleError(e){this.showErrorNotification(e);const t=await this.mediaRepository.get(e.targetId,r.api);t.hasFile||await this.mediaRepository.delete(t.id,r.api)},updateSuccessNotification(e,t){const i={title:this.$root.$tc("global.default.success"),message:this.$root.$tc(t.customMessage??"global.sw-media-upload.notification.success.message",t.successAmount,{count:t.successAmount,total:t.totalAmount}),growl:t.successAmount+t.failureAmount===t.totalAmount};if(t.successAmount+t.failureAmount===t.totalAmount&&(i.title=this.$root.$tc("global.default.success")),this.notificationId!==null){Shopware.Store.get("notification").updateNotification({uuid:this.notificationId,...i}),t.successAmount+t.failureAmount===t.totalAmount&&(this.notificationId=null);return}const s=Shopware.Store.get("notification").createNotification({variant:"success",...i});t.successAmount+t.failureAmount<t.totalAmount&&(this.notificationId=s)},showErrorNotification(e){u(e.error)?this.createNotificationError({title:this.$root.$tc("global.default.error"),message:this.$root.$tc("global.sw-media-upload.notification.illegalFilename.message",{fileName:e.fileName},0)}):m(e.error)?this.createNotificationError({title:this.$root.$tc("global.sw-media-upload.notification.illegalFileUrl.title"),message:this.$root.$tc("global.sw-media-upload.notification.illegalFileUrl.message",0)}):this.createNotificationError({title:this.$root.$tc("global.default.error"),message:this.$root.$tc("global.sw-media-upload.notification.failure.message")})},syncEntitiesAndRunUploads(){this.mediaService.runUploads(this.uploadTag)}}};export{L as default};
