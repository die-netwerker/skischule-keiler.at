const a=`<sw-container columns="1fr 1fr 1fr" gap="0 30px" > <mt-select v-model="measurementUnits.system" required hide-clearable-button :label="labelUnitSystem" :options="measurementSystemOptions" :error="measurementUnitSystemError" :disabled="!acl.can('sales_channel.editor')" @update:model-value="onMeasurementSystemChange" /> <mt-select v-model="measurementUnits.units.length" required hide-clearable-button :label="labelLengthUnit" :options="lengthUnitOptions" :error="measurementLengthUnitError" :disabled="!acl.can('sales_channel.editor')" > <template #result-label-property="{ item, searchTerm }"> <sw-highlight-text :text="item.translated.name || item.name" :search-term="searchTerm" /> <span class="mt-select-result-list-popover-wrapper__length-unit-short-name"> {{ item.shortName }} </span> </template> </mt-select> <mt-select v-model="measurementUnits.units.weight" required :label="labelWeightUnit" hide-clearable-button :options="weightUnitOptions" :error="measurementWeightUnitError" :disabled="!acl.can('sales_channel.editor')" > <template #result-label-property="{ item, searchTerm }"> <sw-highlight-text :text="item.translated.name || item.name" :search-term="searchTerm" /> <span class="mt-select-result-list-popover-wrapper__mass-unit-short-name"> {{ item.shortName }} </span> </template> </mt-select> </sw-container>`,{Criteria:i}=Shopware.Data,m=Shopware.Component.wrapComponentConfig({template:a,props:{salesChannel:{type:Object,required:!0},labelUnitSystem:{type:String,required:!1},labelLengthUnit:{type:String,required:!1},labelWeightUnit:{type:String,required:!1}},inject:["repositoryFactory","acl"],emits:["measurement-system-change"],data(){return{defaultMeasurementSystem:null,defaultDisplayUnits:[],measurementSystems:[],measurementSystem:null}},computed:{measurementSystemRepository(){return this.repositoryFactory.create("measurement_system")},measurementSystemCriteria(){const e=new i(1,null);return e.addAssociation("units"),e},unitSystemLabel(){return this.labelUnitSystem||this.$t("sw-sales-channel.detail.measurementSystem.labelUnitSystem")},dimensionUnitLabel(){return this.labelLengthUnit||this.$t("sw-sales-channel.detail.measurementSystem.labelLengthUnit")},weightUnitLabel(){return this.labelWeightUnit||this.$t("sw-sales-channel.detail.measurementSystem.labelWeightUnit")},measurementUnits(){return this.salesChannel.measurementUnits},measurementSystemOptions(){return this.measurementSystems.map(e=>{var t;return{...e,label:((t=e.translated)==null?void 0:t.name)||e.name,value:e.technicalName}})},lengthUnitOptions(){return this.getUnitOptionsByType("length")},weightUnitOptions(){return this.getUnitOptionsByType("weight")},defaultLengthUnit(){var r;const e=((r=this.measurementSystem)==null?void 0:r.units)||[],t=this.defaultDisplayUnits.find(s=>s.type==="length"),n=e.find(s=>s.type==="length"&&s.default);return e.find(s=>s.shortName===t.shortName)||n},defaultWeightUnit(){var r;const e=((r=this.measurementSystem)==null?void 0:r.units)||[],t=this.defaultDisplayUnits.find(s=>s.type==="weight"),n=e.find(s=>s.type==="weight"&&s.default);return e.find(s=>s.shortName===t.shortName)||n},measurementUnitSystemError(){var e;return(e=this.salesChannel)!=null&&e.id?Shopware.Store.get("error").getApiError(this.salesChannel,"measurementUnits.system"):null},measurementLengthUnitError(){var e;return(e=this.salesChannel)!=null&&e.id?Shopware.Store.get("error").getApiError(this.salesChannel,"measurementUnits.units.length"):null},measurementWeightUnitError(){var e;return(e=this.salesChannel)!=null&&e.id?Shopware.Store.get("error").getApiError(this.salesChannel,"measurementUnits.units.weight"):null}},created(){this.createdComponent()},methods:{async createdComponent(){var e;this.measurementSystems=await this.getDefaultMeasurementSystems(),this.measurementSystem=this.measurementSystems.find(t=>t.technicalName===this.measurementUnits.system),this.defaultDisplayUnits=(((e=this.measurementSystem)==null?void 0:e.units)||[]).filter(t=>Object.values(this.measurementUnits.units).includes(t.shortName))},async onMeasurementSystemChange(e){Array.isArray(e)&&e.length===0||!e||(this.measurementSystem=this.measurementSystems.find(t=>t.technicalName===e),this.measurementUnits.units.length=this.defaultLengthUnit.shortName,this.measurementUnits.units.weight=this.defaultWeightUnit.shortName)},formatUnitLabel(e){var r;if(!e)return"";const t=((r=e.translated)==null?void 0:r.name)||e.name,n=e.shortName||e.name;return`${t} (${n})`.trim()},getDefaultMeasurementSystems(){return this.measurementSystemRepository.search(this.measurementSystemCriteria)},getUnitOptionsByType(e){var t;return(((t=this.measurementSystem)==null?void 0:t.units)||[]).filter(n=>n.type===e).map(n=>({...n,label:this.formatUnitLabel(n),value:n.shortName}))}}});export{m as default};
