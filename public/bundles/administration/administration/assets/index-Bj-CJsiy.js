const d=`{% block sw_order_detail_general %} <div class="sw-order-detail-general"> {% block sw_order_detail_general_info_card %} <mt-card class="sw-order-detail-base__general-info" position-identifier="sw-order-detail-general-info" :title="$tc('sw-order.detailBase.cardTitleGeneralInfo')" > {% block sw_order_detail_general_info %} <sw-order-general-info ref="swOrderGeneralInfo" :order="order" @save-edits="onSaveEdits" /> {% endblock %} </mt-card> {% endblock %} {% block sw_order_detail_general_line_items_card %} <sw-extension-component-section position-identifier="sw-order-detail-base-line-items__before" /> <mt-card class="sw-order-detail-general__line-item-grid-card" position-identifier="sw-order-detail-general-line-items" :is-loading="loading.recalculation" :title="$tc('sw-order.detailBase.cardTitleLineItems')" > {% block sw_order_detail_general_line_items_card_rows %} <template #grid> <sw-container type="row"> {% block sw_order_detail_general_line_items_grid %} <sw-order-line-items-grid ref="sw-order-line-item-grid" :order="order" :context="versionContext" :editable="acl.can('order.editor')" @item-delete="recalculateAndReload" @item-edit="recalculateAndReload" @existing-item-edit="saveAndRecalculate" @item-cancel="recalculateAndReload" /> {% endblock %} {% block sw_order_detail_general_line_items_summary %} <sw-card-section divider="top" slim > <sw-description-list class="sw-order-detail__summary" grid="1fr 1fr" > {% block sw_order_detail_general_line_items_summary_entries %} {% block sw_order_detail_general_line_items_summary_amount %} <dt>{{ $tc('sw-order.detailBase.summaryLabelAmount') }}</dt> <dd>{{ currencyFilter(order.positionPrice, currency.isoCode, order.totalRounding.decimals) }}</dd> {% endblock %} {% block sw_order_detail_general_line_items_summary_shipping_cost %} <template v-if="delivery"> <dt @click="$refs.editShippingCosts.onClick()" > {{ $tc('sw-order.detailBase.summaryLabelShippingCosts') }} </dt> <dd> <sw-order-saveable-field ref="editShippingCosts" v-tooltip="{ showDelay: 300, message: shippingCostsDetail, disabled: taxStatus === 'tax-free' }" type="number" :editable="acl.can('order.editor')" :step="1" :min="0" :value="delivery.shippingCosts.totalPrice" @value-change="onShippingChargeEdited" @update:value="onShippingChargeUpdated" > {{ currencyFilter(delivery.shippingCosts.totalPrice, currency.isoCode, order.totalRounding.decimals) }} </sw-order-saveable-field> </dd> </template> <template v-for="(delivery, index) in deliveryDiscounts" :key="index" > <dt> {{ $tc('sw-order.detailBase.discountLabelShippingCosts') }} </dt> <dd> {{ currencyFilter(delivery.shippingCosts.totalPrice, currency.isoCode, order.totalRounding.decimals) }} </dd> </template> {% endblock %} {% block sw_order_detail_general_line_items_summary_amount_without_tax %} <template v-if="taxStatus !== 'tax-free'"> <dt><strong>{{ $tc('sw-order.detailBase.summaryLabelAmountWithoutTaxes') }}</strong></dt> <dd><strong>{{ currencyFilter(order.amountNet, currency.isoCode, order.totalRounding.decimals) }}</strong></dd> </template> {% endblock %} {% block sw_order_detail_general_line_items_summary_taxes %} <template v-if="taxStatus !== 'tax-free'"> <template v-for="(calculatedTax, index) in sortedCalculatedTaxes" :key="index" > <dt> {{ $tc('sw-order.detailBase.summaryLabelTaxes', { taxRate: calculatedTax.taxRate }, 1) }} </dt> <dd> {{ currencyFilter(calculatedTax.tax, currency.isoCode, order.totalRounding.decimals) }} </dd> </template> </template> {% endblock %} {% block sw_order_detail_general_line_items_summary_amount_total %} <template v-if="taxStatus !== 'tax-free'"> <dt><strong>{{ $tc('sw-order.detailBase.summaryLabelAmountTotal') }}</strong></dt> <dd><strong>{{ currencyFilter(orderTotal, currency.isoCode, order.totalRounding.decimals) }}</strong></dd> <template v-if="displayRounded"> <dt><strong>{{ $tc('sw-order.detailBase.summaryLabelAmountTotalRounded') }}</strong></dt> <dd><strong>{{ currencyFilter(order.price.totalPrice, currency.isoCode, order.totalRounding.decimals) }}</strong></dd> </template> </template> {% endblock %} {% block sw_order_detail_general_line_items_summary_amount_free_tax %} <template v-if="taxStatus === 'tax-free'"> <dt><strong>{{ $tc('sw-order.detailBase.summaryLabelAmount') }}</strong></dt> <dd><strong>{{ currencyFilter(order.price.totalPrice, currency.isoCode, order.totalRounding.decimals) }}</strong></dd> </template> {% endblock %} {% endblock %} </sw-description-list> </sw-card-section> {% endblock %} </sw-container> </template> {% endblock %} </mt-card> <sw-extension-component-section position-identifier="sw-order-detail-base-line-items__after" /> <mt-card class="sw-order-detail-general__promotions-card" position-identifier="sw-order-detail-general-promotions" :title="$tc('sw-order.detailBase.cardTitlePromotions')" > {# @deprecated tag:v6.8.0 - remove \`@loading-change\` #} <sw-order-promotion-field class="sw-order-detail-general__promotions" @loading-change="updateLoading" @reload-entity-data="reloadEntityData" @save-and-reload="saveAndReload" @error="showError" /> </mt-card> <sw-extension-component-section position-identifier="sw-order-detail-base-promotions__after" /> {% endblock %} </div> {% endblock %}`,{Utils:s,Mixin:l,Store:t}=Shopware,{format:o,array:n}=s,{cloneDeep:i}=Shopware.Utils.object,c={template:d,inject:{swOrderDetailOnSaveAndReload:{from:"swOrderDetailOnSaveAndReload",default:null},swOrderDetailOnSaveEdits:{from:"swOrderDetailOnSaveEdits",default:null},swOrderDetailOnRecalculateAndReload:{from:"swOrderDetailOnRecalculateAndReload",default:null},swOrderDetailOnSaveAndRecalculate:{from:"swOrderDetailOnSaveAndRecalculate",default:null},swOrderDetailOnReloadEntityData:{from:"swOrderDetailOnReloadEntityData",default:null},swOrderDetailOnError:{from:"swOrderDetailOnError",default:null},acl:{from:"acl",default:null}},emits:["save-and-recalculate","save-edits","recalculate-and-reload","save-and-reload","reload-entity-data","error"],mixins:[l.getByName("notification")],props:{orderId:{type:String,required:!0},isSaveSuccessful:{type:Boolean,required:!1,default:!1}},data(){return{shippingCosts:null}},computed:{isLoading:()=>t.get("swOrderDetail").isLoading,loading:()=>t.get("swOrderDetail").loading,order:()=>t.get("swOrderDetail").order,versionContext:()=>t.get("swOrderDetail").versionContext,delivery(){return Shopware.Feature.isActive("v6.8.0.0")?this.order.primaryOrderDelivery:this.order.deliveries[0]},deliveryDiscounts(){return Shopware.Feature.isActive("v6.8.0.0")?this.order.deliveries.filter(e=>e.id!==this.order.primaryOrderDeliveryId):n.slice(this.order.deliveries,1)||[]},shippingCostsDetail(){const a=`${this.sortByTaxRate(i(this.order.shippingCosts.calculatedTaxes)).map(r=>`${this.$tc("sw-order.detailBase.shippingCostsTax",{taxRate:r.taxRate,tax:o.currency(r.tax,this.order.currency.isoCode)},0)}`).join("<br>")}`;return`${this.$tc("sw-order.detailBase.tax")}<br>${a}`},sortedCalculatedTaxes(){return this.sortByTaxRate(i(this.order.price.calculatedTaxes)).filter(e=>e.tax!==0)},taxStatus(){return this.order.price.taxStatus},displayRounded(){return this.order.totalRounding.interval!==.01||this.order.totalRounding.decimals!==this.order.itemRounding.decimals},orderTotal(){return this.displayRounded?this.order.price.rawTotal:this.order.price.totalPrice},currency(){return this.order.currency},currencyFilter(){return Shopware.Filter.getByName("currency")}},methods:{sortByTaxRate(e){return e.sort((a,r)=>a.taxRate-r.taxRate)},onShippingChargeEdited(){this.shippingCosts>=0&&(this.delivery.shippingCosts.unitPrice=this.shippingCosts,this.delivery.shippingCosts.totalPrice=this.shippingCosts),this.saveAndRecalculate()},onShippingChargeUpdated(e){this.shippingCosts=e},saveAndRecalculate(){this.swOrderDetailOnSaveAndRecalculate?this.swOrderDetailOnSaveAndRecalculate():this.$emit("save-and-recalculate")},onSaveEdits(){this.swOrderDetailOnSaveEdits?this.swOrderDetailOnSaveEdits():this.$emit("save-edits")},recalculateAndReload(){this.swOrderDetailOnRecalculateAndReload?this.swOrderDetailOnRecalculateAndReload():this.$emit("recalculate-and-reload")},updateLoading(e){t.get("swOrderDetail").setLoading(["order",e])},reloadEntityData(){this.swOrderDetailOnReloadEntityData?this.swOrderDetailOnReloadEntityData():this.$emit("reload-entity-data")},saveAndReload(){this.swOrderDetailOnSaveAndReload?this.swOrderDetailOnSaveAndReload():this.$emit("save-and-reload")},showError(e){this.swOrderDetailOnError?this.swOrderDetailOnError(e):this.$emit("error",e)}}};export{c as default};
