const t='{% block sw_condition_value_content %} <div class="sw-condition-line-item-purchase-price sw-condition__condition-value"> {% block sw_condition_line_item_purchase_price_field_gross_net %} <sw-condition-is-net-select v-bind="{ operators: isNetOperators, condition }" /> {% endblock %} {% block sw_condition_line_item_purchase_price_field_operator %} <sw-condition-operator-select v-bind="{ operators, condition }" :plural="matchesAll" :disabled="disabled || undefined" /> {% endblock %} {% block sw_condition_line_item_purchase_price_field_amount %} <mt-number-field v-if="!isEmpty" v-model="amount" name="sw-field--amount" size="medium" :min="0" :digits="20" number-type="float" :disabled="disabled || undefined" /> {% endblock %} </div> {% endblock %}',{Component:i}=Shopware,{mapPropertyErrors:o}=i.getComponentHelper(),n={template:t,inject:["feature"],data(){return{inputKey:"amount"}},computed:{operators(){return this.conditionDataProviderService.addEmptyOperatorToOperatorSet(this.conditionDataProviderService.getOperatorSet("number"))},isNetOperators(){return this.conditionDataProviderService.getOperatorSet("isNet")},amount:{get(){return this.ensureValueExist(),this.condition.value.amount},set(e){this.ensureValueExist(),this.condition.value={...this.condition.value,amount:e}}},...o("condition",["value.operator","value.isNet","value.amount"]),currentError(){return this.conditionValueIsNetError||this.conditionValueOperatorError||this.conditionValueAmountError}},watch:{operator(){this.isEmpty&&delete this.condition.value.amount}}};export{n as default};
